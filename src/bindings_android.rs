/* automatically generated by rust-bindgen */

pub const VRAPI_PRODUCT_VERSION: ::std::os::raw::c_uint = 1;
pub const VRAPI_MAJOR_VERSION: ::std::os::raw::c_uint = 1;
pub const VRAPI_MINOR_VERSION: ::std::os::raw::c_uint = 5;
pub const VRAPI_PATCH_VERSION: ::std::os::raw::c_uint = 0;
pub const VRAPI_BUILD_VERSION: ::std::os::raw::c_uint = 358458;
pub const VRAPI_BUILD_DESCRIPTION: &'static [u8; 12usize] =
    b"Development\x00";
pub const VRAPI_DRIVER_VERSION: ::std::os::raw::c_uint = 52620531;
pub const VRAPI_PI: f64 = 3.141592653589793;
pub const VRAPI_ZNEAR: f64 = 0.1;
pub type va_list = __builtin_va_list;
pub type jboolean = ::std::os::raw::c_uchar;
pub type jbyte = ::std::os::raw::c_schar;
pub type jchar = ::std::os::raw::c_ushort;
pub type jshort = ::std::os::raw::c_short;
pub type jint = ::std::os::raw::c_int;
pub type jlong = ::std::os::raw::c_longlong;
pub type jfloat = f32;
pub type jdouble = f64;
pub type jsize = jint;
pub type jobject = *mut ::std::os::raw::c_void;
pub type jclass = jobject;
pub type jstring = jobject;
pub type jarray = jobject;
pub type jobjectArray = jarray;
pub type jbooleanArray = jarray;
pub type jbyteArray = jarray;
pub type jcharArray = jarray;
pub type jshortArray = jarray;
pub type jintArray = jarray;
pub type jlongArray = jarray;
pub type jfloatArray = jarray;
pub type jdoubleArray = jarray;
pub type jthrowable = jobject;
pub type jweak = jobject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jfieldID {
    _unused: [u8; 0],
}
pub type jfieldID = *mut _jfieldID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jmethodID {
    _unused: [u8; 0],
}
pub type jmethodID = *mut _jmethodID;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct JNIInvokeInterface {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub DestroyJavaVM: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JavaVM)
                                                 -> jint>,
    pub AttachCurrentThread: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JavaVM,
                                                                        arg2:
                                                                            *mut *mut JNIEnv,
                                                                        arg3:
                                                                            *mut ::std::os::raw::c_void)
                                                       -> jint>,
    pub DetachCurrentThread: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JavaVM)
                                                       -> jint>,
    pub GetEnv: ::std::option::Option<unsafe extern "C" fn(arg1: *mut JavaVM,
                                                           arg2:
                                                               *mut *mut ::std::os::raw::c_void,
                                                           arg3: jint)
                                          -> jint>,
    pub AttachCurrentThreadAsDaemon: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JavaVM,
                                                                                arg2:
                                                                                    *mut *mut JNIEnv,
                                                                                arg3:
                                                                                    *mut ::std::os::raw::c_void)
                                                               -> jint>,
}
#[test]
fn bindgen_test_layout_JNIInvokeInterface() {
    assert_eq!(::std::mem::size_of::<JNIInvokeInterface>() , 64usize , concat
               ! ( "Size of: " , stringify ! ( JNIInvokeInterface ) ));
    assert_eq! (::std::mem::align_of::<JNIInvokeInterface>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( JNIInvokeInterface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) . reserved0 as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( reserved0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) . reserved1 as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) . reserved2 as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( reserved2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) . DestroyJavaVM as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( DestroyJavaVM ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) .
                AttachCurrentThread as * const _ as usize } , 32usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( AttachCurrentThread ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) .
                DetachCurrentThread as * const _ as usize } , 40usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( DetachCurrentThread ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) . GetEnv as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( GetEnv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) .
                AttachCurrentThreadAsDaemon as * const _ as usize } , 56usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( AttachCurrentThreadAsDaemon ) ));
}
impl Clone for JNIInvokeInterface {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union jvalue {
    pub z: jboolean,
    pub b: jbyte,
    pub c: jchar,
    pub s: jshort,
    pub i: jint,
    pub j: jlong,
    pub f: jfloat,
    pub d: jdouble,
    pub l: jobject,
}
#[test]
fn bindgen_test_layout_jvalue() {
    assert_eq!(::std::mem::size_of::<jvalue>() , 8usize , concat ! (
               "Size of: " , stringify ! ( jvalue ) ));
    assert_eq! (::std::mem::align_of::<jvalue>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( jvalue ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . z as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( z ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . b as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . c as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( c ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . s as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . i as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( i ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . j as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( j ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . f as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( f ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . d as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( d ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . l as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( l ) ));
}
impl Clone for jvalue {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum jobjectRefType {
    JNIInvalidRefType = 0,
    JNILocalRefType = 1,
    JNIGlobalRefType = 2,
    JNIWeakGlobalRefType = 3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct JNINativeMethod {
    pub name: *const ::std::os::raw::c_char,
    pub signature: *const ::std::os::raw::c_char,
    pub fnPtr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_JNINativeMethod() {
    assert_eq!(::std::mem::size_of::<JNINativeMethod>() , 24usize , concat ! (
               "Size of: " , stringify ! ( JNINativeMethod ) ));
    assert_eq! (::std::mem::align_of::<JNINativeMethod>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( JNINativeMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeMethod ) ) . name as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeMethod ) ,
                "::" , stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeMethod ) ) . signature as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeMethod ) ,
                "::" , stringify ! ( signature ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeMethod ) ) . fnPtr as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeMethod ) ,
                "::" , stringify ! ( fnPtr ) ));
}
impl Clone for JNINativeMethod {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct JNINativeInterface {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub reserved3: *mut ::std::os::raw::c_void,
    pub GetVersion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv)
                                              -> jint>,
    pub DefineClass: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2:
                                                                    *const ::std::os::raw::c_char,
                                                                arg3: jobject,
                                                                arg4:
                                                                    *const jbyte,
                                                                arg5: jsize)
                                               -> jclass>,
    pub FindClass: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut JNIEnv,
                                                              arg2:
                                                                  *const ::std::os::raw::c_char)
                                             -> jclass>,
    pub FromReflectedMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jobject)
                                                       -> jmethodID>,
    pub FromReflectedField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jobject)
                                                      -> jfieldID>,
    pub ToReflectedMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          jboolean)
                                                     -> jobject>,
    pub GetSuperclass: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jclass)
                                                 -> jclass>,
    pub IsAssignableFrom: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jclass,
                                                                     arg3:
                                                                         jclass)
                                                    -> jboolean>,
    pub ToReflectedField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jclass,
                                                                     arg3:
                                                                         jfieldID,
                                                                     arg4:
                                                                         jboolean)
                                                    -> jobject>,
    pub Throw: ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv,
                                                          arg2: jthrowable)
                                         -> jint>,
    pub ThrowNew: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut JNIEnv,
                                                             arg2: jclass,
                                                             arg3:
                                                                 *const ::std::os::raw::c_char)
                                            -> jint>,
    pub ExceptionOccurred: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv)
                                                     -> jthrowable>,
    pub ExceptionDescribe: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv)>,
    pub ExceptionClear: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv)>,
    pub FatalError: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv,
                                                               arg2:
                                                                   *const ::std::os::raw::c_char)>,
    pub PushLocalFrame: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2: jint)
                                                  -> jint>,
    pub PopLocalFrame: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject)
                                                 -> jobject>,
    pub NewGlobalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject)
                                                -> jobject>,
    pub DeleteGlobalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject)>,
    pub DeleteLocalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject)>,
    pub IsSameObject: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jobject)
                                                -> jboolean>,
    pub NewLocalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jobject)
                                               -> jobject>,
    pub EnsureLocalCapacity: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jint)
                                                       -> jint>,
    pub AllocObject: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jclass)
                                               -> jobject>,
    pub NewObject: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut JNIEnv,
                                                              arg2: jclass,
                                                              arg3:
                                                                  jmethodID, ...)
                                             -> jobject>,
    pub NewObjectV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv,
                                                               arg2: jclass,
                                                               arg3:
                                                                   jmethodID,
                                                               arg4:
                                                                   *mut __va_list_tag)
                                              -> jobject>,
    pub NewObjectA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv,
                                                               arg2: jclass,
                                                               arg3:
                                                                   jmethodID,
                                                               arg4:
                                                                   *mut jvalue)
                                              -> jobject>,
    pub GetObjectClass: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject)
                                                  -> jclass>,
    pub IsInstanceOf: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3: jclass)
                                                -> jboolean>,
    pub GetMethodID: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jclass,
                                                                arg3:
                                                                    *const ::std::os::raw::c_char,
                                                                arg4:
                                                                    *const ::std::os::raw::c_char)
                                               -> jmethodID>,
    pub CallObjectMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID, ...)
                                                    -> jobject>,
    pub CallObjectMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          *mut __va_list_tag)
                                                     -> jobject>,
    pub CallObjectMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          *mut jvalue)
                                                     -> jobject>,
    pub CallBooleanMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID, ...)
                                                     -> jboolean>,
    pub CallBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jobject,
                                                                       arg3:
                                                                           jmethodID,
                                                                       arg4:
                                                                           *mut __va_list_tag)
                                                      -> jboolean>,
    pub CallBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jobject,
                                                                       arg3:
                                                                           jmethodID,
                                                                       arg4:
                                                                           *mut jvalue)
                                                      -> jboolean>,
    pub CallByteMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID, ...)
                                                  -> jbyte>,
    pub CallByteMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut __va_list_tag)
                                                   -> jbyte>,
    pub CallByteMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut jvalue)
                                                   -> jbyte>,
    pub CallCharMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID, ...)
                                                  -> jchar>,
    pub CallCharMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut __va_list_tag)
                                                   -> jchar>,
    pub CallCharMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut jvalue)
                                                   -> jchar>,
    pub CallShortMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID, ...)
                                                   -> jshort>,
    pub CallShortMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID,
                                                                     arg4:
                                                                         *mut __va_list_tag)
                                                    -> jshort>,
    pub CallShortMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID,
                                                                     arg4:
                                                                         *mut jvalue)
                                                    -> jshort>,
    pub CallIntMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jmethodID, ...)
                                                 -> jint>,
    pub CallIntMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID,
                                                                   arg4:
                                                                       *mut __va_list_tag)
                                                  -> jint>,
    pub CallIntMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID,
                                                                   arg4:
                                                                       *mut jvalue)
                                                  -> jint>,
    pub CallLongMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID, ...)
                                                  -> jlong>,
    pub CallLongMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut __va_list_tag)
                                                   -> jlong>,
    pub CallLongMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut jvalue)
                                                   -> jlong>,
    pub CallFloatMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID, ...)
                                                   -> jfloat>,
    pub CallFloatMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID,
                                                                     arg4:
                                                                         *mut __va_list_tag)
                                                    -> jfloat>,
    pub CallFloatMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID,
                                                                     arg4:
                                                                         *mut jvalue)
                                                    -> jfloat>,
    pub CallDoubleMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID, ...)
                                                    -> jdouble>,
    pub CallDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          *mut __va_list_tag)
                                                     -> jdouble>,
    pub CallDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          *mut jvalue)
                                                     -> jdouble>,
    pub CallVoidMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID, ...)>,
    pub CallVoidMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut __va_list_tag)>,
    pub CallVoidMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut jvalue)>,
    pub CallNonvirtualObjectMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID, ...)
                                                              -> jobject>,
    pub CallNonvirtualObjectMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID,
                                                                                arg5:
                                                                                    *mut __va_list_tag)
                                                               -> jobject>,
    pub CallNonvirtualObjectMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID,
                                                                                arg5:
                                                                                    *mut jvalue)
                                                               -> jobject>,
    pub CallNonvirtualBooleanMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID, ...)
                                                               -> jboolean>,
    pub CallNonvirtualBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                     *mut JNIEnv,
                                                                                 arg2:
                                                                                     jobject,
                                                                                 arg3:
                                                                                     jclass,
                                                                                 arg4:
                                                                                     jmethodID,
                                                                                 arg5:
                                                                                     *mut __va_list_tag)
                                                                -> jboolean>,
    pub CallNonvirtualBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                     *mut JNIEnv,
                                                                                 arg2:
                                                                                     jobject,
                                                                                 arg3:
                                                                                     jclass,
                                                                                 arg4:
                                                                                     jmethodID,
                                                                                 arg5:
                                                                                     *mut jvalue)
                                                                -> jboolean>,
    pub CallNonvirtualByteMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID, ...)
                                                            -> jbyte>,
    pub CallNonvirtualByteMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut __va_list_tag)
                                                             -> jbyte>,
    pub CallNonvirtualByteMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut jvalue)
                                                             -> jbyte>,
    pub CallNonvirtualCharMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID, ...)
                                                            -> jchar>,
    pub CallNonvirtualCharMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut __va_list_tag)
                                                             -> jchar>,
    pub CallNonvirtualCharMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut jvalue)
                                                             -> jchar>,
    pub CallNonvirtualShortMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID, ...)
                                                             -> jshort>,
    pub CallNonvirtualShortMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID,
                                                                               arg5:
                                                                                   *mut __va_list_tag)
                                                              -> jshort>,
    pub CallNonvirtualShortMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID,
                                                                               arg5:
                                                                                   *mut jvalue)
                                                              -> jshort>,
    pub CallNonvirtualIntMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jobject,
                                                                            arg3:
                                                                                jclass,
                                                                            arg4:
                                                                                jmethodID, ...)
                                                           -> jint>,
    pub CallNonvirtualIntMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID,
                                                                             arg5:
                                                                                 *mut __va_list_tag)
                                                            -> jint>,
    pub CallNonvirtualIntMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID,
                                                                             arg5:
                                                                                 *mut jvalue)
                                                            -> jint>,
    pub CallNonvirtualLongMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID, ...)
                                                            -> jlong>,
    pub CallNonvirtualLongMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut __va_list_tag)
                                                             -> jlong>,
    pub CallNonvirtualLongMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut jvalue)
                                                             -> jlong>,
    pub CallNonvirtualFloatMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID, ...)
                                                             -> jfloat>,
    pub CallNonvirtualFloatMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID,
                                                                               arg5:
                                                                                   *mut __va_list_tag)
                                                              -> jfloat>,
    pub CallNonvirtualFloatMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID,
                                                                               arg5:
                                                                                   *mut jvalue)
                                                              -> jfloat>,
    pub CallNonvirtualDoubleMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID, ...)
                                                              -> jdouble>,
    pub CallNonvirtualDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID,
                                                                                arg5:
                                                                                    *mut __va_list_tag)
                                                               -> jdouble>,
    pub CallNonvirtualDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID,
                                                                                arg5:
                                                                                    *mut jvalue)
                                                               -> jdouble>,
    pub CallNonvirtualVoidMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID, ...)>,
    pub CallNonvirtualVoidMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut __va_list_tag)>,
    pub CallNonvirtualVoidMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut jvalue)>,
    pub GetFieldID: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv,
                                                               arg2: jclass,
                                                               arg3:
                                                                   *const ::std::os::raw::c_char,
                                                               arg4:
                                                                   *const ::std::os::raw::c_char)
                                              -> jfieldID>,
    pub GetObjectField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jfieldID)
                                                  -> jobject>,
    pub GetBooleanField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jfieldID)
                                                   -> jboolean>,
    pub GetByteField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID)
                                                -> jbyte>,
    pub GetCharField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID)
                                                -> jchar>,
    pub GetShortField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jfieldID)
                                                 -> jshort>,
    pub GetIntField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jobject,
                                                                arg3:
                                                                    jfieldID)
                                               -> jint>,
    pub GetLongField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID)
                                                -> jlong>,
    pub GetFloatField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jfieldID)
                                                 -> jfloat>,
    pub GetDoubleField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jfieldID)
                                                  -> jdouble>,
    pub SetObjectField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jfieldID,
                                                                   arg4:
                                                                       jobject)>,
    pub SetBooleanField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jfieldID,
                                                                    arg4:
                                                                        jboolean)>,
    pub SetByteField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID,
                                                                 arg4:
                                                                     jbyte)>,
    pub SetCharField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID,
                                                                 arg4:
                                                                     jchar)>,
    pub SetShortField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jfieldID,
                                                                  arg4:
                                                                      jshort)>,
    pub SetIntField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jobject,
                                                                arg3:
                                                                    jfieldID,
                                                                arg4: jint)>,
    pub SetLongField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID,
                                                                 arg4:
                                                                     jlong)>,
    pub SetFloatField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jfieldID,
                                                                  arg4:
                                                                      jfloat)>,
    pub SetDoubleField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jfieldID,
                                                                   arg4:
                                                                       jdouble)>,
    pub GetStaticMethodID: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass,
                                                                      arg3:
                                                                          *const ::std::os::raw::c_char,
                                                                      arg4:
                                                                          *const ::std::os::raw::c_char)
                                                     -> jmethodID>,
    pub CallStaticObjectMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID, ...)
                                                          -> jobject>,
    pub CallStaticObjectMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID,
                                                                            arg4:
                                                                                *mut __va_list_tag)
                                                           -> jobject>,
    pub CallStaticObjectMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID,
                                                                            arg4:
                                                                                *mut jvalue)
                                                           -> jobject>,
    pub CallStaticBooleanMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID, ...)
                                                           -> jboolean>,
    pub CallStaticBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jclass,
                                                                             arg3:
                                                                                 jmethodID,
                                                                             arg4:
                                                                                 *mut __va_list_tag)
                                                            -> jboolean>,
    pub CallStaticBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jclass,
                                                                             arg3:
                                                                                 jmethodID,
                                                                             arg4:
                                                                                 *mut jvalue)
                                                            -> jboolean>,
    pub CallStaticByteMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID, ...)
                                                        -> jbyte>,
    pub CallStaticByteMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut __va_list_tag)
                                                         -> jbyte>,
    pub CallStaticByteMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut jvalue)
                                                         -> jbyte>,
    pub CallStaticCharMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID, ...)
                                                        -> jchar>,
    pub CallStaticCharMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut __va_list_tag)
                                                         -> jchar>,
    pub CallStaticCharMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut jvalue)
                                                         -> jchar>,
    pub CallStaticShortMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID, ...)
                                                         -> jshort>,
    pub CallStaticShortMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID,
                                                                           arg4:
                                                                               *mut __va_list_tag)
                                                          -> jshort>,
    pub CallStaticShortMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID,
                                                                           arg4:
                                                                               *mut jvalue)
                                                          -> jshort>,
    pub CallStaticIntMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jmethodID, ...)
                                                       -> jint>,
    pub CallStaticIntMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID,
                                                                         arg4:
                                                                             *mut __va_list_tag)
                                                        -> jint>,
    pub CallStaticIntMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID,
                                                                         arg4:
                                                                             *mut jvalue)
                                                        -> jint>,
    pub CallStaticLongMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID, ...)
                                                        -> jlong>,
    pub CallStaticLongMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut __va_list_tag)
                                                         -> jlong>,
    pub CallStaticLongMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut jvalue)
                                                         -> jlong>,
    pub CallStaticFloatMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID, ...)
                                                         -> jfloat>,
    pub CallStaticFloatMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID,
                                                                           arg4:
                                                                               *mut __va_list_tag)
                                                          -> jfloat>,
    pub CallStaticFloatMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID,
                                                                           arg4:
                                                                               *mut jvalue)
                                                          -> jfloat>,
    pub CallStaticDoubleMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID, ...)
                                                          -> jdouble>,
    pub CallStaticDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID,
                                                                            arg4:
                                                                                *mut __va_list_tag)
                                                           -> jdouble>,
    pub CallStaticDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID,
                                                                            arg4:
                                                                                *mut jvalue)
                                                           -> jdouble>,
    pub CallStaticVoidMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID, ...)>,
    pub CallStaticVoidMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut __va_list_tag)>,
    pub CallStaticVoidMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut jvalue)>,
    pub GetStaticFieldID: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jclass,
                                                                     arg3:
                                                                         *const ::std::os::raw::c_char,
                                                                     arg4:
                                                                         *const ::std::os::raw::c_char)
                                                    -> jfieldID>,
    pub GetStaticObjectField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jfieldID)
                                                        -> jobject>,
    pub GetStaticBooleanField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jfieldID)
                                                         -> jboolean>,
    pub GetStaticByteField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID)
                                                      -> jbyte>,
    pub GetStaticCharField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID)
                                                      -> jchar>,
    pub GetStaticShortField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jfieldID)
                                                       -> jshort>,
    pub GetStaticIntField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass,
                                                                      arg3:
                                                                          jfieldID)
                                                     -> jint>,
    pub GetStaticLongField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID)
                                                      -> jlong>,
    pub GetStaticFloatField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jfieldID)
                                                       -> jfloat>,
    pub GetStaticDoubleField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jfieldID)
                                                        -> jdouble>,
    pub SetStaticObjectField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jfieldID,
                                                                         arg4:
                                                                             jobject)>,
    pub SetStaticBooleanField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jfieldID,
                                                                          arg4:
                                                                              jboolean)>,
    pub SetStaticByteField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID,
                                                                       arg4:
                                                                           jbyte)>,
    pub SetStaticCharField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID,
                                                                       arg4:
                                                                           jchar)>,
    pub SetStaticShortField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jfieldID,
                                                                        arg4:
                                                                            jshort)>,
    pub SetStaticIntField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass,
                                                                      arg3:
                                                                          jfieldID,
                                                                      arg4:
                                                                          jint)>,
    pub SetStaticLongField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID,
                                                                       arg4:
                                                                           jlong)>,
    pub SetStaticFloatField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jfieldID,
                                                                        arg4:
                                                                            jfloat)>,
    pub SetStaticDoubleField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jfieldID,
                                                                         arg4:
                                                                             jdouble)>,
    pub NewString: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut JNIEnv,
                                                              arg2:
                                                                  *const jchar,
                                                              arg3: jsize)
                                             -> jstring>,
    pub GetStringLength: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jstring)
                                                   -> jsize>,
    pub GetStringChars: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jstring,
                                                                   arg3:
                                                                       *mut jboolean)
                                                  -> *const jchar>,
    pub ReleaseStringChars: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jstring,
                                                                       arg3:
                                                                           *const jchar)>,
    pub NewStringUTF: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     *const ::std::os::raw::c_char)
                                                -> jstring>,
    pub GetStringUTFLength: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jstring)
                                                      -> jsize>,
    pub GetStringUTFChars: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jstring,
                                                                      arg3:
                                                                          *mut jboolean)
                                                     ->
                                                         *const ::std::os::raw::c_char>,
    pub ReleaseStringUTFChars: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jstring,
                                                                          arg3:
                                                                              *const ::std::os::raw::c_char)>,
    pub GetArrayLength: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jarray)
                                                  -> jsize>,
    pub NewObjectArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jsize,
                                                                   arg3:
                                                                       jclass,
                                                                   arg4:
                                                                       jobject)
                                                  -> jobjectArray>,
    pub GetObjectArrayElement: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jobjectArray,
                                                                          arg3:
                                                                              jsize)
                                                         -> jobject>,
    pub SetObjectArrayElement: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jobjectArray,
                                                                          arg3:
                                                                              jsize,
                                                                          arg4:
                                                                              jobject)>,
    pub NewBooleanArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jsize)
                                                   -> jbooleanArray>,
    pub NewByteArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2: jsize)
                                                -> jbyteArray>,
    pub NewCharArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2: jsize)
                                                -> jcharArray>,
    pub NewShortArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2: jsize)
                                                 -> jshortArray>,
    pub NewIntArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jsize)
                                               -> jintArray>,
    pub NewLongArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2: jsize)
                                                -> jlongArray>,
    pub NewFloatArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2: jsize)
                                                 -> jfloatArray>,
    pub NewDoubleArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jsize)
                                                  -> jdoubleArray>,
    pub GetBooleanArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jbooleanArray,
                                                                            arg3:
                                                                                *mut jboolean)
                                                           -> *mut jboolean>,
    pub GetByteArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jbyteArray,
                                                                         arg3:
                                                                             *mut jboolean)
                                                        -> *mut jbyte>,
    pub GetCharArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jcharArray,
                                                                         arg3:
                                                                             *mut jboolean)
                                                        -> *mut jchar>,
    pub GetShortArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jshortArray,
                                                                          arg3:
                                                                              *mut jboolean)
                                                         -> *mut jshort>,
    pub GetIntArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jintArray,
                                                                        arg3:
                                                                            *mut jboolean)
                                                       -> *mut jint>,
    pub GetLongArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jlongArray,
                                                                         arg3:
                                                                             *mut jboolean)
                                                        -> *mut jlong>,
    pub GetFloatArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jfloatArray,
                                                                          arg3:
                                                                              *mut jboolean)
                                                         -> *mut jfloat>,
    pub GetDoubleArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jdoubleArray,
                                                                           arg3:
                                                                               *mut jboolean)
                                                          -> *mut jdouble>,
    pub ReleaseBooleanArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jbooleanArray,
                                                                                arg3:
                                                                                    *mut jboolean,
                                                                                arg4:
                                                                                    jint)>,
    pub ReleaseByteArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jbyteArray,
                                                                             arg3:
                                                                                 *mut jbyte,
                                                                             arg4:
                                                                                 jint)>,
    pub ReleaseCharArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jcharArray,
                                                                             arg3:
                                                                                 *mut jchar,
                                                                             arg4:
                                                                                 jint)>,
    pub ReleaseShortArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jshortArray,
                                                                              arg3:
                                                                                  *mut jshort,
                                                                              arg4:
                                                                                  jint)>,
    pub ReleaseIntArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jintArray,
                                                                            arg3:
                                                                                *mut jint,
                                                                            arg4:
                                                                                jint)>,
    pub ReleaseLongArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jlongArray,
                                                                             arg3:
                                                                                 *mut jlong,
                                                                             arg4:
                                                                                 jint)>,
    pub ReleaseFloatArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jfloatArray,
                                                                              arg3:
                                                                                  *mut jfloat,
                                                                              arg4:
                                                                                  jint)>,
    pub ReleaseDoubleArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jdoubleArray,
                                                                               arg3:
                                                                                   *mut jdouble,
                                                                               arg4:
                                                                                   jint)>,
    pub GetBooleanArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jbooleanArray,
                                                                          arg3:
                                                                              jsize,
                                                                          arg4:
                                                                              jsize,
                                                                          arg5:
                                                                              *mut jboolean)>,
    pub GetByteArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jbyteArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *mut jbyte)>,
    pub GetCharArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jcharArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *mut jchar)>,
    pub GetShortArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jshortArray,
                                                                        arg3:
                                                                            jsize,
                                                                        arg4:
                                                                            jsize,
                                                                        arg5:
                                                                            *mut jshort)>,
    pub GetIntArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jintArray,
                                                                      arg3:
                                                                          jsize,
                                                                      arg4:
                                                                          jsize,
                                                                      arg5:
                                                                          *mut jint)>,
    pub GetLongArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jlongArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *mut jlong)>,
    pub GetFloatArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jfloatArray,
                                                                        arg3:
                                                                            jsize,
                                                                        arg4:
                                                                            jsize,
                                                                        arg5:
                                                                            *mut jfloat)>,
    pub GetDoubleArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jdoubleArray,
                                                                         arg3:
                                                                             jsize,
                                                                         arg4:
                                                                             jsize,
                                                                         arg5:
                                                                             *mut jdouble)>,
    pub SetBooleanArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jbooleanArray,
                                                                          arg3:
                                                                              jsize,
                                                                          arg4:
                                                                              jsize,
                                                                          arg5:
                                                                              *const jboolean)>,
    pub SetByteArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jbyteArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *const jbyte)>,
    pub SetCharArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jcharArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *const jchar)>,
    pub SetShortArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jshortArray,
                                                                        arg3:
                                                                            jsize,
                                                                        arg4:
                                                                            jsize,
                                                                        arg5:
                                                                            *const jshort)>,
    pub SetIntArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jintArray,
                                                                      arg3:
                                                                          jsize,
                                                                      arg4:
                                                                          jsize,
                                                                      arg5:
                                                                          *const jint)>,
    pub SetLongArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jlongArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *const jlong)>,
    pub SetFloatArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jfloatArray,
                                                                        arg3:
                                                                            jsize,
                                                                        arg4:
                                                                            jsize,
                                                                        arg5:
                                                                            *const jfloat)>,
    pub SetDoubleArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jdoubleArray,
                                                                         arg3:
                                                                             jsize,
                                                                         arg4:
                                                                             jsize,
                                                                         arg5:
                                                                             *const jdouble)>,
    pub RegisterNatives: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jclass,
                                                                    arg3:
                                                                        *const JNINativeMethod,
                                                                    arg4:
                                                                        jint)
                                                   -> jint>,
    pub UnregisterNatives: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass)
                                                     -> jint>,
    pub MonitorEnter: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject)
                                                -> jint>,
    pub MonitorExit: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jobject)
                                               -> jint>,
    pub GetJavaVM: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut JNIEnv,
                                                              arg2:
                                                                  *mut *mut JavaVM)
                                             -> jint>,
    pub GetStringRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jstring,
                                                                    arg3:
                                                                        jsize,
                                                                    arg4:
                                                                        jsize,
                                                                    arg5:
                                                                        *mut jchar)>,
    pub GetStringUTFRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jstring,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *mut ::std::os::raw::c_char)>,
    pub GetPrimitiveArrayCritical: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jarray,
                                                                              arg3:
                                                                                  *mut jboolean)
                                                             ->
                                                                 *mut ::std::os::raw::c_void>,
    pub ReleasePrimitiveArrayCritical: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *mut JNIEnv,
                                                                                  arg2:
                                                                                      jarray,
                                                                                  arg3:
                                                                                      *mut ::std::os::raw::c_void,
                                                                                  arg4:
                                                                                      jint)>,
    pub GetStringCritical: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jstring,
                                                                      arg3:
                                                                          *mut jboolean)
                                                     -> *const jchar>,
    pub ReleaseStringCritical: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jstring,
                                                                          arg3:
                                                                              *const jchar)>,
    pub NewWeakGlobalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject)
                                                    -> jweak>,
    pub DeleteWeakGlobalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jweak)>,
    pub ExceptionCheck: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv)
                                                  -> jboolean>,
    pub NewDirectByteBuffer: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            *mut ::std::os::raw::c_void,
                                                                        arg3:
                                                                            jlong)
                                                       -> jobject>,
    pub GetDirectBufferAddress: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jobject)
                                                          ->
                                                              *mut ::std::os::raw::c_void>,
    pub GetDirectBufferCapacity: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jobject)
                                                           -> jlong>,
    pub GetObjectRefType: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject)
                                                    -> jobjectRefType>,
}
#[test]
fn bindgen_test_layout_JNINativeInterface() {
    assert_eq!(::std::mem::size_of::<JNINativeInterface>() , 1864usize ,
               concat ! ( "Size of: " , stringify ! ( JNINativeInterface ) ));
    assert_eq! (::std::mem::align_of::<JNINativeInterface>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( JNINativeInterface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . reserved0 as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( reserved0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . reserved1 as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . reserved2 as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( reserved2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . reserved3 as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( reserved3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetVersion as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetVersion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . DefineClass as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( DefineClass ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . FindClass as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( FindClass ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                FromReflectedMethod as * const _ as usize } , 56usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( FromReflectedMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                FromReflectedField as * const _ as usize } , 64usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( FromReflectedField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ToReflectedMethod as * const _ as usize } , 72usize , concat !
                (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ToReflectedMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetSuperclass as
                * const _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetSuperclass ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . IsAssignableFrom
                as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( IsAssignableFrom ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . ToReflectedField
                as * const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ToReflectedField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . Throw as * const
                _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( Throw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . ThrowNew as *
                const _ as usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ThrowNew ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ExceptionOccurred as * const _ as usize } , 120usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ExceptionOccurred ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ExceptionDescribe as * const _ as usize } , 128usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ExceptionDescribe ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . ExceptionClear
                as * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ExceptionClear ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . FatalError as *
                const _ as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( FatalError ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . PushLocalFrame
                as * const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( PushLocalFrame ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . PopLocalFrame as
                * const _ as usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( PopLocalFrame ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewGlobalRef as
                * const _ as usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewGlobalRef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . DeleteGlobalRef
                as * const _ as usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( DeleteGlobalRef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . DeleteLocalRef
                as * const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( DeleteLocalRef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . IsSameObject as
                * const _ as usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( IsSameObject ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewLocalRef as *
                const _ as usize } , 200usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewLocalRef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                EnsureLocalCapacity as * const _ as usize } , 208usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( EnsureLocalCapacity ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . AllocObject as *
                const _ as usize } , 216usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( AllocObject ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewObject as *
                const _ as usize } , 224usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewObject ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewObjectV as *
                const _ as usize } , 232usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewObjectV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewObjectA as *
                const _ as usize } , 240usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewObjectA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetObjectClass
                as * const _ as usize } , 248usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetObjectClass ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . IsInstanceOf as
                * const _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( IsInstanceOf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetMethodID as *
                const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetMethodID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallObjectMethod
                as * const _ as usize } , 272usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallObjectMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallObjectMethodV as * const _ as usize } , 280usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallObjectMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallObjectMethodA as * const _ as usize } , 288usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallObjectMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallBooleanMethod as * const _ as usize } , 296usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallBooleanMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallBooleanMethodV as * const _ as usize } , 304usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallBooleanMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallBooleanMethodA as * const _ as usize } , 312usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallBooleanMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallByteMethod
                as * const _ as usize } , 320usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallByteMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallByteMethodV
                as * const _ as usize } , 328usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallByteMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallByteMethodA
                as * const _ as usize } , 336usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallByteMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallCharMethod
                as * const _ as usize } , 344usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallCharMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallCharMethodV
                as * const _ as usize } , 352usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallCharMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallCharMethodA
                as * const _ as usize } , 360usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallCharMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallShortMethod
                as * const _ as usize } , 368usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallShortMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallShortMethodV
                as * const _ as usize } , 376usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallShortMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallShortMethodA
                as * const _ as usize } , 384usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallShortMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallIntMethod as
                * const _ as usize } , 392usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallIntMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallIntMethodV
                as * const _ as usize } , 400usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallIntMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallIntMethodA
                as * const _ as usize } , 408usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallIntMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallLongMethod
                as * const _ as usize } , 416usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallLongMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallLongMethodV
                as * const _ as usize } , 424usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallLongMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallLongMethodA
                as * const _ as usize } , 432usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallLongMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallFloatMethod
                as * const _ as usize } , 440usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallFloatMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallFloatMethodV
                as * const _ as usize } , 448usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallFloatMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallFloatMethodA
                as * const _ as usize } , 456usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallFloatMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallDoubleMethod
                as * const _ as usize } , 464usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallDoubleMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallDoubleMethodV as * const _ as usize } , 472usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallDoubleMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallDoubleMethodA as * const _ as usize } , 480usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallDoubleMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallVoidMethod
                as * const _ as usize } , 488usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallVoidMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallVoidMethodV
                as * const _ as usize } , 496usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallVoidMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallVoidMethodA
                as * const _ as usize } , 504usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallVoidMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualObjectMethod as * const _ as usize } , 512usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualObjectMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualObjectMethodV as * const _ as usize } , 520usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualObjectMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualObjectMethodA as * const _ as usize } , 528usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualObjectMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualBooleanMethod as * const _ as usize } , 536usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualBooleanMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualBooleanMethodV as * const _ as usize } ,
                544usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualBooleanMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualBooleanMethodA as * const _ as usize } ,
                552usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualBooleanMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualByteMethod as * const _ as usize } , 560usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualByteMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualByteMethodV as * const _ as usize } , 568usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualByteMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualByteMethodA as * const _ as usize } , 576usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualByteMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualCharMethod as * const _ as usize } , 584usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualCharMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualCharMethodV as * const _ as usize } , 592usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualCharMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualCharMethodA as * const _ as usize } , 600usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualCharMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualShortMethod as * const _ as usize } , 608usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualShortMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualShortMethodV as * const _ as usize } , 616usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualShortMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualShortMethodA as * const _ as usize } , 624usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualShortMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualIntMethod as * const _ as usize } , 632usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualIntMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualIntMethodV as * const _ as usize } , 640usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualIntMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualIntMethodA as * const _ as usize } , 648usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualIntMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualLongMethod as * const _ as usize } , 656usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualLongMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualLongMethodV as * const _ as usize } , 664usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualLongMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualLongMethodA as * const _ as usize } , 672usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualLongMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualFloatMethod as * const _ as usize } , 680usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualFloatMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualFloatMethodV as * const _ as usize } , 688usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualFloatMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualFloatMethodA as * const _ as usize } , 696usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualFloatMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualDoubleMethod as * const _ as usize } , 704usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualDoubleMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualDoubleMethodV as * const _ as usize } , 712usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualDoubleMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualDoubleMethodA as * const _ as usize } , 720usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualDoubleMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualVoidMethod as * const _ as usize } , 728usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualVoidMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualVoidMethodV as * const _ as usize } , 736usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualVoidMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualVoidMethodA as * const _ as usize } , 744usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualVoidMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetFieldID as *
                const _ as usize } , 752usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetFieldID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetObjectField
                as * const _ as usize } , 760usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetObjectField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetBooleanField
                as * const _ as usize } , 768usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetBooleanField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetByteField as
                * const _ as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetByteField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetCharField as
                * const _ as usize } , 784usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetCharField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetShortField as
                * const _ as usize } , 792usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetShortField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetIntField as *
                const _ as usize } , 800usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetIntField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetLongField as
                * const _ as usize } , 808usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetLongField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetFloatField as
                * const _ as usize } , 816usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetFloatField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetDoubleField
                as * const _ as usize } , 824usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetDoubleField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetObjectField
                as * const _ as usize } , 832usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetObjectField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetBooleanField
                as * const _ as usize } , 840usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetBooleanField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetByteField as
                * const _ as usize } , 848usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetByteField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetCharField as
                * const _ as usize } , 856usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetCharField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetShortField as
                * const _ as usize } , 864usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetShortField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetIntField as *
                const _ as usize } , 872usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetIntField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetLongField as
                * const _ as usize } , 880usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetLongField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetFloatField as
                * const _ as usize } , 888usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetFloatField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetDoubleField
                as * const _ as usize } , 896usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetDoubleField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticMethodID as * const _ as usize } , 904usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticMethodID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticObjectMethod as * const _ as usize } , 912usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticObjectMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticObjectMethodV as * const _ as usize } , 920usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticObjectMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticObjectMethodA as * const _ as usize } , 928usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticObjectMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticBooleanMethod as * const _ as usize } , 936usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticBooleanMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticBooleanMethodV as * const _ as usize } , 944usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticBooleanMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticBooleanMethodA as * const _ as usize } , 952usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticBooleanMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticByteMethod as * const _ as usize } , 960usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticByteMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticByteMethodV as * const _ as usize } , 968usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticByteMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticByteMethodA as * const _ as usize } , 976usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticByteMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticCharMethod as * const _ as usize } , 984usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticCharMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticCharMethodV as * const _ as usize } , 992usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticCharMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticCharMethodA as * const _ as usize } , 1000usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticCharMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticShortMethod as * const _ as usize } , 1008usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticShortMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticShortMethodV as * const _ as usize } , 1016usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticShortMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticShortMethodA as * const _ as usize } , 1024usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticShortMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticIntMethod as * const _ as usize } , 1032usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticIntMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticIntMethodV as * const _ as usize } , 1040usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticIntMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticIntMethodA as * const _ as usize } , 1048usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticIntMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticLongMethod as * const _ as usize } , 1056usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticLongMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticLongMethodV as * const _ as usize } , 1064usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticLongMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticLongMethodA as * const _ as usize } , 1072usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticLongMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticFloatMethod as * const _ as usize } , 1080usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticFloatMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticFloatMethodV as * const _ as usize } , 1088usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticFloatMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticFloatMethodA as * const _ as usize } , 1096usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticFloatMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticDoubleMethod as * const _ as usize } , 1104usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticDoubleMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticDoubleMethodV as * const _ as usize } , 1112usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticDoubleMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticDoubleMethodA as * const _ as usize } , 1120usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticDoubleMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticVoidMethod as * const _ as usize } , 1128usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticVoidMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticVoidMethodV as * const _ as usize } , 1136usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticVoidMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticVoidMethodA as * const _ as usize } , 1144usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticVoidMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetStaticFieldID
                as * const _ as usize } , 1152usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticFieldID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticObjectField as * const _ as usize } , 1160usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticObjectField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticBooleanField as * const _ as usize } , 1168usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticBooleanField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticByteField as * const _ as usize } , 1176usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticByteField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticCharField as * const _ as usize } , 1184usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticCharField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticShortField as * const _ as usize } , 1192usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticShortField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticIntField as * const _ as usize } , 1200usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticIntField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticLongField as * const _ as usize } , 1208usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticLongField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticFloatField as * const _ as usize } , 1216usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticFloatField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticDoubleField as * const _ as usize } , 1224usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticDoubleField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticObjectField as * const _ as usize } , 1232usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticObjectField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticBooleanField as * const _ as usize } , 1240usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticBooleanField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticByteField as * const _ as usize } , 1248usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticByteField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticCharField as * const _ as usize } , 1256usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticCharField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticShortField as * const _ as usize } , 1264usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticShortField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticIntField as * const _ as usize } , 1272usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticIntField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticLongField as * const _ as usize } , 1280usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticLongField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticFloatField as * const _ as usize } , 1288usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticFloatField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticDoubleField as * const _ as usize } , 1296usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticDoubleField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewString as *
                const _ as usize } , 1304usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewString ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetStringLength
                as * const _ as usize } , 1312usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringLength ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetStringChars
                as * const _ as usize } , 1320usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringChars ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseStringChars as * const _ as usize } , 1328usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseStringChars ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewStringUTF as
                * const _ as usize } , 1336usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewStringUTF ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStringUTFLength as * const _ as usize } , 1344usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringUTFLength ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStringUTFChars as * const _ as usize } , 1352usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringUTFChars ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseStringUTFChars as * const _ as usize } , 1360usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseStringUTFChars ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetArrayLength
                as * const _ as usize } , 1368usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetArrayLength ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewObjectArray
                as * const _ as usize } , 1376usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewObjectArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetObjectArrayElement as * const _ as usize } , 1384usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetObjectArrayElement ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetObjectArrayElement as * const _ as usize } , 1392usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetObjectArrayElement ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewBooleanArray
                as * const _ as usize } , 1400usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewBooleanArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewByteArray as
                * const _ as usize } , 1408usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewByteArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewCharArray as
                * const _ as usize } , 1416usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewCharArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewShortArray as
                * const _ as usize } , 1424usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewShortArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewIntArray as *
                const _ as usize } , 1432usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewIntArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewLongArray as
                * const _ as usize } , 1440usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewLongArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewFloatArray as
                * const _ as usize } , 1448usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewFloatArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewDoubleArray
                as * const _ as usize } , 1456usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewDoubleArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetBooleanArrayElements as * const _ as usize } , 1464usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetBooleanArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetByteArrayElements as * const _ as usize } , 1472usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetByteArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetCharArrayElements as * const _ as usize } , 1480usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetCharArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetShortArrayElements as * const _ as usize } , 1488usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetShortArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetIntArrayElements as * const _ as usize } , 1496usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetIntArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetLongArrayElements as * const _ as usize } , 1504usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetLongArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetFloatArrayElements as * const _ as usize } , 1512usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetFloatArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetDoubleArrayElements as * const _ as usize } , 1520usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetDoubleArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseBooleanArrayElements as * const _ as usize } ,
                1528usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseBooleanArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseByteArrayElements as * const _ as usize } , 1536usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseByteArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseCharArrayElements as * const _ as usize } , 1544usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseCharArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseShortArrayElements as * const _ as usize } , 1552usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseShortArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseIntArrayElements as * const _ as usize } , 1560usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseIntArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseLongArrayElements as * const _ as usize } , 1568usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseLongArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseFloatArrayElements as * const _ as usize } , 1576usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseFloatArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseDoubleArrayElements as * const _ as usize } , 1584usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseDoubleArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetBooleanArrayRegion as * const _ as usize } , 1592usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetBooleanArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetByteArrayRegion as * const _ as usize } , 1600usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetByteArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetCharArrayRegion as * const _ as usize } , 1608usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetCharArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetShortArrayRegion as * const _ as usize } , 1616usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetShortArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetIntArrayRegion as * const _ as usize } , 1624usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetIntArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetLongArrayRegion as * const _ as usize } , 1632usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetLongArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetFloatArrayRegion as * const _ as usize } , 1640usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetFloatArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetDoubleArrayRegion as * const _ as usize } , 1648usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetDoubleArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetBooleanArrayRegion as * const _ as usize } , 1656usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetBooleanArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetByteArrayRegion as * const _ as usize } , 1664usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetByteArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetCharArrayRegion as * const _ as usize } , 1672usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetCharArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetShortArrayRegion as * const _ as usize } , 1680usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetShortArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetIntArrayRegion as * const _ as usize } , 1688usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetIntArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetLongArrayRegion as * const _ as usize } , 1696usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetLongArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetFloatArrayRegion as * const _ as usize } , 1704usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetFloatArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetDoubleArrayRegion as * const _ as usize } , 1712usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetDoubleArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . RegisterNatives
                as * const _ as usize } , 1720usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( RegisterNatives ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                UnregisterNatives as * const _ as usize } , 1728usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( UnregisterNatives ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . MonitorEnter as
                * const _ as usize } , 1736usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( MonitorEnter ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . MonitorExit as *
                const _ as usize } , 1744usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( MonitorExit ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetJavaVM as *
                const _ as usize } , 1752usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetJavaVM ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetStringRegion
                as * const _ as usize } , 1760usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStringUTFRegion as * const _ as usize } , 1768usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringUTFRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetPrimitiveArrayCritical as * const _ as usize } , 1776usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetPrimitiveArrayCritical ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleasePrimitiveArrayCritical as * const _ as usize } ,
                1784usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleasePrimitiveArrayCritical ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStringCritical as * const _ as usize } , 1792usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringCritical ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseStringCritical as * const _ as usize } , 1800usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseStringCritical ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewWeakGlobalRef
                as * const _ as usize } , 1808usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewWeakGlobalRef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                DeleteWeakGlobalRef as * const _ as usize } , 1816usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( DeleteWeakGlobalRef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . ExceptionCheck
                as * const _ as usize } , 1824usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ExceptionCheck ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                NewDirectByteBuffer as * const _ as usize } , 1832usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewDirectByteBuffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetDirectBufferAddress as * const _ as usize } , 1840usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetDirectBufferAddress ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetDirectBufferCapacity as * const _ as usize } , 1848usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetDirectBufferCapacity ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetObjectRefType
                as * const _ as usize } , 1856usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetObjectRefType ) ));
}
impl Clone for JNINativeInterface {
    fn clone(&self) -> Self { *self }
}
pub type JNIEnv = *const JNINativeInterface;
pub type JavaVM = *const JNIInvokeInterface;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrJava {
    pub Vm: *mut JavaVM,
    pub Env: *mut JNIEnv,
    pub ActivityObject: jobject,
}
#[test]
fn bindgen_test_layout_ovrJava() {
    assert_eq!(::std::mem::size_of::<ovrJava>() , 24usize , concat ! (
               "Size of: " , stringify ! ( ovrJava ) ));
    assert_eq! (::std::mem::align_of::<ovrJava>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ovrJava ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrJava ) ) . Vm as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrJava ) , "::" ,
                stringify ! ( Vm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrJava ) ) . Env as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrJava ) , "::" ,
                stringify ! ( Env ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrJava ) ) . ActivityObject as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrJava ) , "::" ,
                stringify ! ( ActivityObject ) ));
}
impl Clone for ovrJava {
    fn clone(&self) -> Self { *self }
}
pub type ovrResult = ::std::os::raw::c_int;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrSuccessResult_ { ovrSuccess = 0, }
pub use self::ovrSuccessResult_ as ovrSuccessResult;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrErrorResult_ {
    ovrError_MemoryAllocationFailure = -1000,
    ovrError_NotInitialized = -1004,
    ovrError_InvalidParameter = -1005,
    ovrError_DeviceUnavailable = -1010,
    ovrError_InvalidOperation = -1015,
    ovrError_UnsupportedDeviceType = -1050,
    ovrError_NoDevice = -1051,
    ovrError_NotImplemented = -1052,
    ovrResult_EnumSize = 2147483647,
}
pub use self::ovrErrorResult_ as ovrErrorResult;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrVector2f_ {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_ovrVector2f_() {
    assert_eq!(::std::mem::size_of::<ovrVector2f_>() , 8usize , concat ! (
               "Size of: " , stringify ! ( ovrVector2f_ ) ));
    assert_eq! (::std::mem::align_of::<ovrVector2f_>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ovrVector2f_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrVector2f_ ) ) . x as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrVector2f_ ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrVector2f_ ) ) . y as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrVector2f_ ) , "::" ,
                stringify ! ( y ) ));
}
impl Clone for ovrVector2f_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrVector2f = ovrVector2f_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrVector3f_ {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_ovrVector3f_() {
    assert_eq!(::std::mem::size_of::<ovrVector3f_>() , 12usize , concat ! (
               "Size of: " , stringify ! ( ovrVector3f_ ) ));
    assert_eq! (::std::mem::align_of::<ovrVector3f_>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ovrVector3f_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrVector3f_ ) ) . x as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrVector3f_ ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrVector3f_ ) ) . y as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrVector3f_ ) , "::" ,
                stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrVector3f_ ) ) . z as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrVector3f_ ) , "::" ,
                stringify ! ( z ) ));
}
impl Clone for ovrVector3f_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrVector3f = ovrVector3f_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrVector4f_ {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_ovrVector4f_() {
    assert_eq!(::std::mem::size_of::<ovrVector4f_>() , 16usize , concat ! (
               "Size of: " , stringify ! ( ovrVector4f_ ) ));
    assert_eq! (::std::mem::align_of::<ovrVector4f_>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ovrVector4f_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrVector4f_ ) ) . x as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrVector4f_ ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrVector4f_ ) ) . y as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrVector4f_ ) , "::" ,
                stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrVector4f_ ) ) . z as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrVector4f_ ) , "::" ,
                stringify ! ( z ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrVector4f_ ) ) . w as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrVector4f_ ) , "::" ,
                stringify ! ( w ) ));
}
impl Clone for ovrVector4f_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrVector4f = ovrVector4f_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrQuatf_ {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_ovrQuatf_() {
    assert_eq!(::std::mem::size_of::<ovrQuatf_>() , 16usize , concat ! (
               "Size of: " , stringify ! ( ovrQuatf_ ) ));
    assert_eq! (::std::mem::align_of::<ovrQuatf_>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ovrQuatf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrQuatf_ ) ) . x as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrQuatf_ ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrQuatf_ ) ) . y as * const _ as usize }
                , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrQuatf_ ) , "::" ,
                stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrQuatf_ ) ) . z as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrQuatf_ ) , "::" ,
                stringify ! ( z ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrQuatf_ ) ) . w as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrQuatf_ ) , "::" ,
                stringify ! ( w ) ));
}
impl Clone for ovrQuatf_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrQuatf = ovrQuatf_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrMatrix4f_ {
    pub M: [[f32; 4usize]; 4usize],
}
#[test]
fn bindgen_test_layout_ovrMatrix4f_() {
    assert_eq!(::std::mem::size_of::<ovrMatrix4f_>() , 64usize , concat ! (
               "Size of: " , stringify ! ( ovrMatrix4f_ ) ));
    assert_eq! (::std::mem::align_of::<ovrMatrix4f_>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ovrMatrix4f_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrMatrix4f_ ) ) . M as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrMatrix4f_ ) , "::" ,
                stringify ! ( M ) ));
}
impl Clone for ovrMatrix4f_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrMatrix4f = ovrMatrix4f_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrPosef_ {
    pub Orientation: ovrQuatf,
    pub Position: ovrVector3f,
}
#[test]
fn bindgen_test_layout_ovrPosef_() {
    assert_eq!(::std::mem::size_of::<ovrPosef_>() , 28usize , concat ! (
               "Size of: " , stringify ! ( ovrPosef_ ) ));
    assert_eq! (::std::mem::align_of::<ovrPosef_>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ovrPosef_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrPosef_ ) ) . Orientation as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrPosef_ ) , "::" ,
                stringify ! ( Orientation ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrPosef_ ) ) . Position as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrPosef_ ) , "::" ,
                stringify ! ( Position ) ));
}
impl Clone for ovrPosef_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrPosef = ovrPosef_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrRectf_ {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
}
#[test]
fn bindgen_test_layout_ovrRectf_() {
    assert_eq!(::std::mem::size_of::<ovrRectf_>() , 16usize , concat ! (
               "Size of: " , stringify ! ( ovrRectf_ ) ));
    assert_eq! (::std::mem::align_of::<ovrRectf_>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ovrRectf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrRectf_ ) ) . x as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrRectf_ ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrRectf_ ) ) . y as * const _ as usize }
                , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrRectf_ ) , "::" ,
                stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrRectf_ ) ) . width as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrRectf_ ) , "::" ,
                stringify ! ( width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrRectf_ ) ) . height as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrRectf_ ) , "::" ,
                stringify ! ( height ) ));
}
impl Clone for ovrRectf_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrRectf = ovrRectf_;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrBooleanResult { VRAPI_FALSE = 0, VRAPI_TRUE = 1, }
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrStructureType {
    VRAPI_STRUCTURE_TYPE_INIT_PARMS = 1,
    VRAPI_STRUCTURE_TYPE_MODE_PARMS = 2,
    VRAPI_STRUCTURE_TYPE_FRAME_PARMS = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrDeviceType {
    VRAPI_DEVICE_TYPE_NOTE4 = 0,
    VRAPI_DEVICE_TYPE_NOTE5 = 1,
    VRAPI_DEVICE_TYPE_S6 = 2,
    VRAPI_DEVICE_TYPE_S7 = 3,
    VRAPI_DEVICE_TYPE_NOTE7 = 4,
    VRAPI_DEVICE_TYPE_RESERVED = 5,
    VRAPI_MAX_DEVICE_TYPES = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrHeadsetType {
    VRAPI_HEADSET_TYPE_R320 = 0,
    VRAPI_HEADSET_TYPE_R321 = 1,
    VRAPI_HEADSET_TYPE_R322 = 2,
    VRAPI_HEADSET_TYPE_R323 = 3,
    VRAPI_MAX_HEADSET_TYPES = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrDeviceRegion {
    VRAPI_DEVICE_REGION_UNSPECIFIED = 0,
    VRAPI_DEVICE_REGION_JAPAN = 1,
    VRAPI_DEVICE_REGION_CHINA = 2,
    VRAPI_MAX_DEVICE_REGIONS = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrVideoDecoderLimit {
    VRAPI_VIDEO_DECODER_LIMIT_4K_30FPS = 0,
    VRAPI_VIDEO_DECODER_LIMIT_4K_60FPS = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrSystemProperty {
    VRAPI_SYS_PROP_DEVICE_TYPE = 0,
    VRAPI_SYS_PROP_MAX_FULLSPEED_FRAMEBUFFER_SAMPLES = 1,
    VRAPI_SYS_PROP_DISPLAY_PIXELS_WIDE = 2,
    VRAPI_SYS_PROP_DISPLAY_PIXELS_HIGH = 3,
    VRAPI_SYS_PROP_DISPLAY_REFRESH_RATE = 4,
    VRAPI_SYS_PROP_SUGGESTED_EYE_TEXTURE_WIDTH = 5,
    VRAPI_SYS_PROP_SUGGESTED_EYE_TEXTURE_HEIGHT = 6,
    VRAPI_SYS_PROP_SUGGESTED_EYE_FOV_DEGREES_X = 7,
    VRAPI_SYS_PROP_SUGGESTED_EYE_FOV_DEGREES_Y = 8,
    VRAPI_SYS_PROP_EXT_SDCARD_PATH = 9,
    VRAPI_SYS_PROP_DEVICE_REGION = 10,
    VRAPI_SYS_PROP_VIDEO_DECODER_LIMIT = 11,
    VRAPI_SYS_PROP_HEADSET_TYPE = 12,
    VRAPI_SYS_PROP_BACK_BUTTON_SHORTPRESS_TIME = 13,
    VRAPI_SYS_PROP_BACK_BUTTON_DOUBLETAP_TIME = 14,
    VRAPI_SYS_PROP_MULTIVIEW_AVAILABLE = 128,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrSystemStatus {
    VRAPI_SYS_STATUS_DOCKED = 0,
    VRAPI_SYS_STATUS_MOUNTED = 1,
    VRAPI_SYS_STATUS_THROTTLED = 2,
    VRAPI_SYS_STATUS_THROTTLED2 = 3,
    VRAPI_SYS_STATUS_THROTTLED_WARNING_LEVEL = 4,
    VRAPI_SYS_STATUS_RENDER_LATENCY_MILLISECONDS = 5,
    VRAPI_SYS_STATUS_TIMEWARP_LATENCY_MILLISECONDS = 6,
    VRAPI_SYS_STATUS_SCANOUT_LATENCY_MILLISECONDS = 7,
    VRAPI_SYS_STATUS_APP_FRAMES_PER_SECOND = 8,
    VRAPI_SYS_STATUS_SCREEN_TEARS_PER_SECOND = 9,
    VRAPI_SYS_STATUS_EARLY_FRAMES_PER_SECOND = 10,
    VRAPI_SYS_STATUS_STALE_FRAMES_PER_SECOND = 11,
    VRAPI_SYS_STATUS_HEADPHONES_PLUGGED_IN = 12,
    VRAPI_SYS_STATUS_RECENTER_COUNT = 13,
    VRAPI_SYS_STATUS_FRONT_BUFFER_PROTECTED = 128,
    VRAPI_SYS_STATUS_FRONT_BUFFER_565 = 129,
    VRAPI_SYS_STATUS_FRONT_BUFFER_SRGB = 130,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrInitializeStatus {
    VRAPI_INITIALIZE_SUCCESS = 0,
    VRAPI_INITIALIZE_UNKNOWN_ERROR = -1,
    VRAPI_INITIALIZE_PERMISSIONS_ERROR = -2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrGraphicsAPI {
    VRAPI_GRAPHICS_API_OPENGL_ES_2 = 66048,
    VRAPI_GRAPHICS_API_OPENGL_ES_3 = 66304,
    VRAPI_GRAPHICS_API_OPENGL_COMPAT = 131328,
    VRAPI_GRAPHICS_API_OPENGL_CORE_3 = 131840,
    VRAPI_GRAPHICS_API_OPENGL_CORE_4 = 132096,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrInitParms {
    pub Type: ovrStructureType,
    pub ProductVersion: ::std::os::raw::c_int,
    pub MajorVersion: ::std::os::raw::c_int,
    pub MinorVersion: ::std::os::raw::c_int,
    pub PatchVersion: ::std::os::raw::c_int,
    pub GraphicsAPI: ovrGraphicsAPI,
    pub Java: ovrJava,
}
#[test]
fn bindgen_test_layout_ovrInitParms() {
    assert_eq!(::std::mem::size_of::<ovrInitParms>() , 48usize , concat ! (
               "Size of: " , stringify ! ( ovrInitParms ) ));
    assert_eq! (::std::mem::align_of::<ovrInitParms>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ovrInitParms ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInitParms ) ) . Type as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrInitParms ) , "::" ,
                stringify ! ( Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInitParms ) ) . ProductVersion as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrInitParms ) , "::" ,
                stringify ! ( ProductVersion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInitParms ) ) . MajorVersion as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrInitParms ) , "::" ,
                stringify ! ( MajorVersion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInitParms ) ) . MinorVersion as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrInitParms ) , "::" ,
                stringify ! ( MinorVersion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInitParms ) ) . PatchVersion as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrInitParms ) , "::" ,
                stringify ! ( PatchVersion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInitParms ) ) . GraphicsAPI as * const
                _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrInitParms ) , "::" ,
                stringify ! ( GraphicsAPI ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInitParms ) ) . Java as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrInitParms ) , "::" ,
                stringify ! ( Java ) ));
}
impl Clone for ovrInitParms {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrModeFlags {
    VRAPI_MODE_FLAG_ALLOW_POWER_SAVE = 255,
    VRAPI_MODE_FLAG_RESET_WINDOW_FULLSCREEN = 65280,
    VRAPI_MODE_FLAG_NATIVE_WINDOW = 65536,
    VRAPI_MODE_FLAG_FRONT_BUFFER_PROTECTED = 131072,
    VRAPI_MODE_FLAG_FRONT_BUFFER_565 = 262144,
    VRAPI_MODE_FLAG_FRONT_BUFFER_SRGB = 524288,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrModeParms {
    pub Type: ovrStructureType,
    pub Flags: ::std::os::raw::c_uint,
    pub Java: ovrJava,
    pub Display: ::std::os::raw::c_ulonglong,
    pub WindowSurface: ::std::os::raw::c_ulonglong,
    pub ShareContext: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_ovrModeParms() {
    assert_eq!(::std::mem::size_of::<ovrModeParms>() , 56usize , concat ! (
               "Size of: " , stringify ! ( ovrModeParms ) ));
    assert_eq! (::std::mem::align_of::<ovrModeParms>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ovrModeParms ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrModeParms ) ) . Type as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrModeParms ) , "::" ,
                stringify ! ( Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrModeParms ) ) . Flags as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrModeParms ) , "::" ,
                stringify ! ( Flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrModeParms ) ) . Java as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrModeParms ) , "::" ,
                stringify ! ( Java ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrModeParms ) ) . Display as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrModeParms ) , "::" ,
                stringify ! ( Display ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrModeParms ) ) . WindowSurface as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrModeParms ) , "::" ,
                stringify ! ( WindowSurface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrModeParms ) ) . ShareContext as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrModeParms ) , "::" ,
                stringify ! ( ShareContext ) ));
}
impl Clone for ovrModeParms {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrMobile {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrRigidBodyPosef_ {
    pub Pose: ovrPosef,
    pub AngularVelocity: ovrVector3f,
    pub LinearVelocity: ovrVector3f,
    pub AngularAcceleration: ovrVector3f,
    pub LinearAcceleration: ovrVector3f,
    pub dead10: [::std::os::raw::c_uchar; 4usize],
    pub TimeInSeconds: f64,
    pub PredictionInSeconds: f64,
}
#[test]
fn bindgen_test_layout_ovrRigidBodyPosef_() {
    assert_eq!(::std::mem::size_of::<ovrRigidBodyPosef_>() , 96usize , concat
               ! ( "Size of: " , stringify ! ( ovrRigidBodyPosef_ ) ));
    assert_eq! (::std::mem::align_of::<ovrRigidBodyPosef_>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( ovrRigidBodyPosef_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrRigidBodyPosef_ ) ) . Pose as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrRigidBodyPosef_ ) ,
                "::" , stringify ! ( Pose ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrRigidBodyPosef_ ) ) . AngularVelocity
                as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrRigidBodyPosef_ ) ,
                "::" , stringify ! ( AngularVelocity ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrRigidBodyPosef_ ) ) . LinearVelocity
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrRigidBodyPosef_ ) ,
                "::" , stringify ! ( LinearVelocity ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrRigidBodyPosef_ ) ) .
                AngularAcceleration as * const _ as usize } , 52usize , concat
                ! (
                "Alignment of field: " , stringify ! ( ovrRigidBodyPosef_ ) ,
                "::" , stringify ! ( AngularAcceleration ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrRigidBodyPosef_ ) ) .
                LinearAcceleration as * const _ as usize } , 64usize , concat
                ! (
                "Alignment of field: " , stringify ! ( ovrRigidBodyPosef_ ) ,
                "::" , stringify ! ( LinearAcceleration ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrRigidBodyPosef_ ) ) . dead10 as *
                const _ as usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrRigidBodyPosef_ ) ,
                "::" , stringify ! ( dead10 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrRigidBodyPosef_ ) ) . TimeInSeconds as
                * const _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrRigidBodyPosef_ ) ,
                "::" , stringify ! ( TimeInSeconds ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrRigidBodyPosef_ ) ) .
                PredictionInSeconds as * const _ as usize } , 88usize , concat
                ! (
                "Alignment of field: " , stringify ! ( ovrRigidBodyPosef_ ) ,
                "::" , stringify ! ( PredictionInSeconds ) ));
}
impl Clone for ovrRigidBodyPosef_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrRigidBodyPosef = ovrRigidBodyPosef_;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrTrackingStatus {
    VRAPI_TRACKING_STATUS_ORIENTATION_TRACKED = 1,
    VRAPI_TRACKING_STATUS_POSITION_TRACKED = 2,
    VRAPI_TRACKING_STATUS_HMD_CONNECTED = 128,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrTracking_ {
    pub Status: ::std::os::raw::c_uint,
    pub dead12: [::std::os::raw::c_uchar; 4usize],
    pub HeadPose: ovrRigidBodyPosef,
}
#[test]
fn bindgen_test_layout_ovrTracking_() {
    assert_eq!(::std::mem::size_of::<ovrTracking_>() , 104usize , concat ! (
               "Size of: " , stringify ! ( ovrTracking_ ) ));
    assert_eq! (::std::mem::align_of::<ovrTracking_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ovrTracking_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrTracking_ ) ) . Status as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrTracking_ ) , "::" ,
                stringify ! ( Status ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrTracking_ ) ) . dead12 as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrTracking_ ) , "::" ,
                stringify ! ( dead12 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrTracking_ ) ) . HeadPose as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrTracking_ ) , "::" ,
                stringify ! ( HeadPose ) ));
}
impl Clone for ovrTracking_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrTracking = ovrTracking_;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrTextureType {
    VRAPI_TEXTURE_TYPE_2D = 0,
    VRAPI_TEXTURE_TYPE_2D_EXTERNAL = 1,
    VRAPI_TEXTURE_TYPE_2D_ARRAY = 2,
    VRAPI_TEXTURE_TYPE_CUBE = 3,
    VRAPI_TEXTURE_TYPE_MAX = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrTextureFormat {
    VRAPI_TEXTURE_FORMAT_NONE = 0,
    VRAPI_TEXTURE_FORMAT_565 = 1,
    VRAPI_TEXTURE_FORMAT_5551 = 2,
    VRAPI_TEXTURE_FORMAT_4444 = 3,
    VRAPI_TEXTURE_FORMAT_8888 = 4,
    VRAPI_TEXTURE_FORMAT_8888_sRGB = 5,
    VRAPI_TEXTURE_FORMAT_RGBA16F = 6,
    VRAPI_TEXTURE_FORMAT_DEPTH_16 = 7,
    VRAPI_TEXTURE_FORMAT_DEPTH_24 = 8,
    VRAPI_TEXTURE_FORMAT_DEPTH_24_STENCIL_8 = 9,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrDefaultTextureSwapChain {
    VRAPI_DEFAULT_TEXTURE_SWAPCHAIN_BLACK = 1,
    VRAPI_DEFAULT_TEXTURE_SWAPCHAIN_LOADING_ICON = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrTextureSwapChainSettings {
    VRAPI_TEXTURE_SWAPCHAIN_FULL_MIP_CHAIN = -1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrTextureSwapChain {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrFrameFlags {
    VRAPI_FRAME_FLAG_INHIBIT_SRGB_FRAMEBUFFER = 1,
    VRAPI_FRAME_FLAG_FLUSH = 2,
    VRAPI_FRAME_FLAG_FINAL = 4,
    VRAPI_FRAME_FLAG_INHIBIT_VOLUME_LAYER = 64,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrFrameLayerFlags {
    VRAPI_FRAME_LAYER_FLAG_WRITE_ALPHA = 1,
    VRAPI_FRAME_LAYER_FLAG_CHROMATIC_ABERRATION_CORRECTION = 2,
    VRAPI_FRAME_LAYER_FLAG_FIXED_TO_VIEW = 4,
    VRAPI_FRAME_LAYER_FLAG_SPIN = 8,
    VRAPI_FRAME_LAYER_FLAG_CLIP_TO_TEXTURE_RECT = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrFrameLayerEye {
    VRAPI_FRAME_LAYER_EYE_LEFT = 0,
    VRAPI_FRAME_LAYER_EYE_RIGHT = 1,
    VRAPI_FRAME_LAYER_EYE_MAX = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrFrameLayerBlend {
    VRAPI_FRAME_LAYER_BLEND_ZERO = 0,
    VRAPI_FRAME_LAYER_BLEND_ONE = 1,
    VRAPI_FRAME_LAYER_BLEND_SRC_ALPHA = 2,
    VRAPI_FRAME_LAYER_BLEND_DST_ALPHA = 3,
    VRAPI_FRAME_LAYER_BLEND_ONE_MINUS_DST_ALPHA = 4,
    VRAPI_FRAME_LAYER_BLEND_ONE_MINUS_SRC_ALPHA = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrFrameLayerType { VRAPI_FRAME_LAYER_TYPE_MAX = 4, }
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrExtraLatencyMode {
    VRAPI_EXTRA_LATENCY_MODE_OFF = 0,
    VRAPI_EXTRA_LATENCY_MODE_ON = 1,
    VRAPI_EXTRA_LATENCY_MODE_DYNAMIC = 2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrFrameLayerTexture {
    pub ColorTextureSwapChain: *mut ovrTextureSwapChain,
    pub DepthTextureSwapChain: *mut ovrTextureSwapChain,
    pub TextureSwapChainIndex: ::std::os::raw::c_int,
    pub TexCoordsFromTanAngles: ovrMatrix4f,
    pub TextureRect: ovrRectf,
    pub dead14: [::std::os::raw::c_uchar; 4usize],
    pub HeadPose: ovrRigidBodyPosef,
    pub CompletionFence: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_ovrFrameLayerTexture() {
    assert_eq!(::std::mem::size_of::<ovrFrameLayerTexture>() , 208usize ,
               concat ! ( "Size of: " , stringify ! ( ovrFrameLayerTexture )
               ));
    assert_eq! (::std::mem::align_of::<ovrFrameLayerTexture>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( ovrFrameLayerTexture ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayerTexture ) ) .
                ColorTextureSwapChain as * const _ as usize } , 0usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayerTexture )
                , "::" , stringify ! ( ColorTextureSwapChain ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayerTexture ) ) .
                DepthTextureSwapChain as * const _ as usize } , 8usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayerTexture )
                , "::" , stringify ! ( DepthTextureSwapChain ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayerTexture ) ) .
                TextureSwapChainIndex as * const _ as usize } , 16usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayerTexture )
                , "::" , stringify ! ( TextureSwapChainIndex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayerTexture ) ) .
                TexCoordsFromTanAngles as * const _ as usize } , 20usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayerTexture )
                , "::" , stringify ! ( TexCoordsFromTanAngles ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayerTexture ) ) . TextureRect as
                * const _ as usize } , 84usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayerTexture )
                , "::" , stringify ! ( TextureRect ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayerTexture ) ) . dead14 as *
                const _ as usize } , 100usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayerTexture )
                , "::" , stringify ! ( dead14 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayerTexture ) ) . HeadPose as *
                const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayerTexture )
                , "::" , stringify ! ( HeadPose ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayerTexture ) ) .
                CompletionFence as * const _ as usize } , 200usize , concat !
                (
                "Alignment of field: " , stringify ! ( ovrFrameLayerTexture )
                , "::" , stringify ! ( CompletionFence ) ));
}
impl Clone for ovrFrameLayerTexture {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrFrameLayer {
    pub Textures: [ovrFrameLayerTexture; 2usize],
    pub SpinSpeed: f32,
    pub SpinScale: f32,
    pub ColorScale: f32,
    pub dead16: [::std::os::raw::c_uchar; 4usize],
    pub SrcBlend: ovrFrameLayerBlend,
    pub DstBlend: ovrFrameLayerBlend,
    pub Flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ovrFrameLayer() {
    assert_eq!(::std::mem::size_of::<ovrFrameLayer>() , 448usize , concat ! (
               "Size of: " , stringify ! ( ovrFrameLayer ) ));
    assert_eq! (::std::mem::align_of::<ovrFrameLayer>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ovrFrameLayer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayer ) ) . Textures as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayer ) , "::"
                , stringify ! ( Textures ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayer ) ) . SpinSpeed as * const
                _ as usize } , 416usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayer ) , "::"
                , stringify ! ( SpinSpeed ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayer ) ) . SpinScale as * const
                _ as usize } , 420usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayer ) , "::"
                , stringify ! ( SpinScale ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayer ) ) . ColorScale as * const
                _ as usize } , 424usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayer ) , "::"
                , stringify ! ( ColorScale ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayer ) ) . dead16 as * const _
                as usize } , 428usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayer ) , "::"
                , stringify ! ( dead16 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayer ) ) . SrcBlend as * const _
                as usize } , 432usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayer ) , "::"
                , stringify ! ( SrcBlend ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayer ) ) . DstBlend as * const _
                as usize } , 436usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayer ) , "::"
                , stringify ! ( DstBlend ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameLayer ) ) . Flags as * const _ as
                usize } , 440usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameLayer ) , "::"
                , stringify ! ( Flags ) ));
}
impl Clone for ovrFrameLayer {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrPerformanceParms {
    pub CpuLevel: ::std::os::raw::c_int,
    pub GpuLevel: ::std::os::raw::c_int,
    pub MainThreadTid: ::std::os::raw::c_int,
    pub RenderThreadTid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ovrPerformanceParms() {
    assert_eq!(::std::mem::size_of::<ovrPerformanceParms>() , 16usize , concat
               ! ( "Size of: " , stringify ! ( ovrPerformanceParms ) ));
    assert_eq! (::std::mem::align_of::<ovrPerformanceParms>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( ovrPerformanceParms ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrPerformanceParms ) ) . CpuLevel as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrPerformanceParms ) ,
                "::" , stringify ! ( CpuLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrPerformanceParms ) ) . GpuLevel as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrPerformanceParms ) ,
                "::" , stringify ! ( GpuLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrPerformanceParms ) ) . MainThreadTid
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrPerformanceParms ) ,
                "::" , stringify ! ( MainThreadTid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrPerformanceParms ) ) . RenderThreadTid
                as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrPerformanceParms ) ,
                "::" , stringify ! ( RenderThreadTid ) ));
}
impl Clone for ovrPerformanceParms {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrFrameParms {
    pub Type: ovrStructureType,
    pub dead19: [::std::os::raw::c_uchar; 4usize],
    pub Layers: [ovrFrameLayer; 4usize],
    pub LayerCount: ::std::os::raw::c_int,
    pub Flags: ::std::os::raw::c_int,
    pub FrameIndex: ::std::os::raw::c_longlong,
    pub MinimumVsyncs: ::std::os::raw::c_int,
    pub ExtraLatencyMode: ovrExtraLatencyMode,
    pub ExternalVelocity: ovrMatrix4f,
    pub SurfaceTextureObject: jobject,
    pub PerformanceParms: ovrPerformanceParms,
    pub Java: ovrJava,
}
#[test]
fn bindgen_test_layout_ovrFrameParms() {
    assert_eq!(::std::mem::size_of::<ovrFrameParms>() , 1936usize , concat ! (
               "Size of: " , stringify ! ( ovrFrameParms ) ));
    assert_eq! (::std::mem::align_of::<ovrFrameParms>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ovrFrameParms ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameParms ) ) . Type as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameParms ) , "::"
                , stringify ! ( Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameParms ) ) . dead19 as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameParms ) , "::"
                , stringify ! ( dead19 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameParms ) ) . Layers as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameParms ) , "::"
                , stringify ! ( Layers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameParms ) ) . LayerCount as * const
                _ as usize } , 1800usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameParms ) , "::"
                , stringify ! ( LayerCount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameParms ) ) . Flags as * const _ as
                usize } , 1804usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameParms ) , "::"
                , stringify ! ( Flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameParms ) ) . FrameIndex as * const
                _ as usize } , 1808usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameParms ) , "::"
                , stringify ! ( FrameIndex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameParms ) ) . MinimumVsyncs as *
                const _ as usize } , 1816usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameParms ) , "::"
                , stringify ! ( MinimumVsyncs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameParms ) ) . ExtraLatencyMode as *
                const _ as usize } , 1820usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameParms ) , "::"
                , stringify ! ( ExtraLatencyMode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameParms ) ) . ExternalVelocity as *
                const _ as usize } , 1824usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameParms ) , "::"
                , stringify ! ( ExternalVelocity ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameParms ) ) . SurfaceTextureObject
                as * const _ as usize } , 1888usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameParms ) , "::"
                , stringify ! ( SurfaceTextureObject ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameParms ) ) . PerformanceParms as *
                const _ as usize } , 1896usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameParms ) , "::"
                , stringify ! ( PerformanceParms ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrFrameParms ) ) . Java as * const _ as
                usize } , 1912usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrFrameParms ) , "::"
                , stringify ! ( Java ) ));
}
impl Clone for ovrFrameParms {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrHeadModelParms {
    pub InterpupillaryDistance: f32,
    pub EyeHeight: f32,
    pub HeadModelDepth: f32,
    pub HeadModelHeight: f32,
}
#[test]
fn bindgen_test_layout_ovrHeadModelParms() {
    assert_eq!(::std::mem::size_of::<ovrHeadModelParms>() , 16usize , concat !
               ( "Size of: " , stringify ! ( ovrHeadModelParms ) ));
    assert_eq! (::std::mem::align_of::<ovrHeadModelParms>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( ovrHeadModelParms ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrHeadModelParms ) ) .
                InterpupillaryDistance as * const _ as usize } , 0usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( ovrHeadModelParms ) ,
                "::" , stringify ! ( InterpupillaryDistance ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrHeadModelParms ) ) . EyeHeight as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrHeadModelParms ) ,
                "::" , stringify ! ( EyeHeight ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrHeadModelParms ) ) . HeadModelDepth as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrHeadModelParms ) ,
                "::" , stringify ! ( HeadModelDepth ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrHeadModelParms ) ) . HeadModelHeight
                as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrHeadModelParms ) ,
                "::" , stringify ! ( HeadModelHeight ) ));
}
impl Clone for ovrHeadModelParms {
    fn clone(&self) -> Self { *self }
}
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrButton_ {
    ovrButton_A = 1,
    ovrButton_B = 2,
    ovrButton_RThumb = 4,
    ovrButton_RShoulder = 8,
    ovrButton_X = 256,
    ovrButton_Y = 512,
    ovrButton_LThumb = 1024,
    ovrButton_LShoulder = 2048,
    ovrButton_Up = 65536,
    ovrButton_Down = 131072,
    ovrButton_Left = 262144,
    ovrButton_Right = 524288,
    ovrButton_Enter = 1048576,
    ovrButton_Back = 2097152,
    ovrButton_EnumSize = 2147483647,
}
pub use self::ovrButton_ as ovrButton;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrControllerType_ {
    ovrControllerType_None = 0,
    ovrControllerType_Reserved0 = 1,
    ovrControllerType_Reserved1 = 2,
    ovrControllerType_TrackedRemote = 4,
    ovrControllerType_Headset = 8,
    ovrControllerType_Reserved2 = 16,
    ovrControllerType_EnumSize = 2147483647,
}
pub use self::ovrControllerType_ as ovrControllerType;
pub type ovrDeviceID = u32;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrDeviceIdType_ { ovrDeviceIdType_Invalid = 2147483647, }
pub use self::ovrDeviceIdType_ as ovrDeviceIdType;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrInputCapabilityHeader_ {
    pub Type: ovrControllerType,
    pub DeviceID: ovrDeviceID,
}
#[test]
fn bindgen_test_layout_ovrInputCapabilityHeader_() {
    assert_eq!(::std::mem::size_of::<ovrInputCapabilityHeader_>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( ovrInputCapabilityHeader_ ) ));
    assert_eq! (::std::mem::align_of::<ovrInputCapabilityHeader_>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( ovrInputCapabilityHeader_ )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputCapabilityHeader_ ) ) . Type as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputCapabilityHeader_ ) , "::" , stringify ! ( Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputCapabilityHeader_ ) ) . DeviceID
                as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputCapabilityHeader_ ) , "::" , stringify ! ( DeviceID )
                ));
}
impl Clone for ovrInputCapabilityHeader_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrInputCapabilityHeader = ovrInputCapabilityHeader_;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrControllerCapabilities_ {
    ovrControllerCaps_HasOrientationTracking = 1,
    ovrControllerCaps_HasPositionTracking = 2,
    ovrControllerCaps_LeftHand = 4,
    ovrControllerCaps_RightHand = 8,
    ovrControllerCaps_EnumSize = 2147483647,
}
pub use self::ovrControllerCapabilities_ as ovrControllerCapabilties;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrInputTrackedRemoteCapabilities_ {
    pub Header: ovrInputCapabilityHeader,
    pub ControllerCapabilities: u32,
    pub ButtonCapabilities: u32,
    pub TrackpadMaxX: u16,
    pub TrackpadMaxY: u16,
    pub TrackpadSizeX: f32,
    pub TrackpadSizeY: f32,
}
#[test]
fn bindgen_test_layout_ovrInputTrackedRemoteCapabilities_() {
    assert_eq!(::std::mem::size_of::<ovrInputTrackedRemoteCapabilities_>() ,
               28usize , concat ! (
               "Size of: " , stringify ! ( ovrInputTrackedRemoteCapabilities_
               ) ));
    assert_eq! (::std::mem::align_of::<ovrInputTrackedRemoteCapabilities_>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! (
                ovrInputTrackedRemoteCapabilities_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputTrackedRemoteCapabilities_ ) ) .
                Header as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputTrackedRemoteCapabilities_ ) , "::" , stringify ! (
                Header ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputTrackedRemoteCapabilities_ ) ) .
                ControllerCapabilities as * const _ as usize } , 8usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputTrackedRemoteCapabilities_ ) , "::" , stringify ! (
                ControllerCapabilities ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputTrackedRemoteCapabilities_ ) ) .
                ButtonCapabilities as * const _ as usize } , 12usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                ovrInputTrackedRemoteCapabilities_ ) , "::" , stringify ! (
                ButtonCapabilities ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputTrackedRemoteCapabilities_ ) ) .
                TrackpadMaxX as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputTrackedRemoteCapabilities_ ) , "::" , stringify ! (
                TrackpadMaxX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputTrackedRemoteCapabilities_ ) ) .
                TrackpadMaxY as * const _ as usize } , 18usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputTrackedRemoteCapabilities_ ) , "::" , stringify ! (
                TrackpadMaxY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputTrackedRemoteCapabilities_ ) ) .
                TrackpadSizeX as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputTrackedRemoteCapabilities_ ) , "::" , stringify ! (
                TrackpadSizeX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputTrackedRemoteCapabilities_ ) ) .
                TrackpadSizeY as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputTrackedRemoteCapabilities_ ) , "::" , stringify ! (
                TrackpadSizeY ) ));
}
impl Clone for ovrInputTrackedRemoteCapabilities_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrInputTrackedRemoteCapabilities =
    ovrInputTrackedRemoteCapabilities_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrInputHeadsetCapabilities_ {
    pub Header: ovrInputCapabilityHeader,
    pub ControllerCapabilities: u32,
    pub ButtonCapabilities: u32,
    pub TrackpadMaxX: u16,
    pub TrackpadMaxY: u16,
    pub TrackpadSizeX: f32,
    pub TrackpadSizeY: f32,
}
#[test]
fn bindgen_test_layout_ovrInputHeadsetCapabilities_() {
    assert_eq!(::std::mem::size_of::<ovrInputHeadsetCapabilities_>() , 28usize
               , concat ! (
               "Size of: " , stringify ! ( ovrInputHeadsetCapabilities_ ) ));
    assert_eq! (::std::mem::align_of::<ovrInputHeadsetCapabilities_>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( ovrInputHeadsetCapabilities_ )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputHeadsetCapabilities_ ) ) . Header
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputHeadsetCapabilities_ ) , "::" , stringify ! ( Header )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputHeadsetCapabilities_ ) ) .
                ControllerCapabilities as * const _ as usize } , 8usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputHeadsetCapabilities_ ) , "::" , stringify ! (
                ControllerCapabilities ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputHeadsetCapabilities_ ) ) .
                ButtonCapabilities as * const _ as usize } , 12usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                ovrInputHeadsetCapabilities_ ) , "::" , stringify ! (
                ButtonCapabilities ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputHeadsetCapabilities_ ) ) .
                TrackpadMaxX as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputHeadsetCapabilities_ ) , "::" , stringify ! (
                TrackpadMaxX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputHeadsetCapabilities_ ) ) .
                TrackpadMaxY as * const _ as usize } , 18usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputHeadsetCapabilities_ ) , "::" , stringify ! (
                TrackpadMaxY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputHeadsetCapabilities_ ) ) .
                TrackpadSizeX as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputHeadsetCapabilities_ ) , "::" , stringify ! (
                TrackpadSizeX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputHeadsetCapabilities_ ) ) .
                TrackpadSizeY as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputHeadsetCapabilities_ ) , "::" , stringify ! (
                TrackpadSizeY ) ));
}
impl Clone for ovrInputHeadsetCapabilities_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrInputHeadsetCapabilities = ovrInputHeadsetCapabilities_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrInputStateHeader_ {
    pub ControllerType: ovrControllerType,
    pub TimeInSeconds: f64,
}
#[test]
fn bindgen_test_layout_ovrInputStateHeader_() {
    assert_eq!(::std::mem::size_of::<ovrInputStateHeader_>() , 16usize ,
               concat ! ( "Size of: " , stringify ! ( ovrInputStateHeader_ )
               ));
    assert_eq! (::std::mem::align_of::<ovrInputStateHeader_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( ovrInputStateHeader_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputStateHeader_ ) ) . ControllerType
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrInputStateHeader_ )
                , "::" , stringify ! ( ControllerType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputStateHeader_ ) ) . TimeInSeconds
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrInputStateHeader_ )
                , "::" , stringify ! ( TimeInSeconds ) ));
}
impl Clone for ovrInputStateHeader_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrInputStateHeader = ovrInputStateHeader_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrInputStateTrackedRemote_ {
    pub Header: ovrInputStateHeader,
    pub Buttons: u32,
    pub TrackpadStatus: u32,
    pub TrackpadPosition: ovrVector2f,
    pub BatteryPercentRemaining: u8,
    pub RecenterCount: u8,
    pub Reserved: u16,
}
#[test]
fn bindgen_test_layout_ovrInputStateTrackedRemote_() {
    assert_eq!(::std::mem::size_of::<ovrInputStateTrackedRemote_>() , 40usize
               , concat ! (
               "Size of: " , stringify ! ( ovrInputStateTrackedRemote_ ) ));
    assert_eq! (::std::mem::align_of::<ovrInputStateTrackedRemote_>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( ovrInputStateTrackedRemote_ )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputStateTrackedRemote_ ) ) . Header
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputStateTrackedRemote_ ) , "::" , stringify ! ( Header )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputStateTrackedRemote_ ) ) . Buttons
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputStateTrackedRemote_ ) , "::" , stringify ! ( Buttons )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputStateTrackedRemote_ ) ) .
                TrackpadStatus as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputStateTrackedRemote_ ) , "::" , stringify ! (
                TrackpadStatus ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputStateTrackedRemote_ ) ) .
                TrackpadPosition as * const _ as usize } , 24usize , concat !
                (
                "Alignment of field: " , stringify ! (
                ovrInputStateTrackedRemote_ ) , "::" , stringify ! (
                TrackpadPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputStateTrackedRemote_ ) ) .
                BatteryPercentRemaining as * const _ as usize } , 32usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputStateTrackedRemote_ ) , "::" , stringify ! (
                BatteryPercentRemaining ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputStateTrackedRemote_ ) ) .
                RecenterCount as * const _ as usize } , 33usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputStateTrackedRemote_ ) , "::" , stringify ! (
                RecenterCount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputStateTrackedRemote_ ) ) .
                Reserved as * const _ as usize } , 34usize , concat ! (
                "Alignment of field: " , stringify ! (
                ovrInputStateTrackedRemote_ ) , "::" , stringify ! ( Reserved
                ) ));
}
impl Clone for ovrInputStateTrackedRemote_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrInputStateTrackedRemote = ovrInputStateTrackedRemote_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ovrInputStateHeadset_ {
    pub Header: ovrInputStateHeader,
    pub Buttons: u32,
    pub TrackpadStatus: u32,
    pub TrackpadPosition: ovrVector2f,
}
#[test]
fn bindgen_test_layout_ovrInputStateHeadset_() {
    assert_eq!(::std::mem::size_of::<ovrInputStateHeadset_>() , 32usize ,
               concat ! ( "Size of: " , stringify ! ( ovrInputStateHeadset_ )
               ));
    assert_eq! (::std::mem::align_of::<ovrInputStateHeadset_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( ovrInputStateHeadset_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputStateHeadset_ ) ) . Header as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrInputStateHeadset_ )
                , "::" , stringify ! ( Header ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputStateHeadset_ ) ) . Buttons as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrInputStateHeadset_ )
                , "::" , stringify ! ( Buttons ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputStateHeadset_ ) ) .
                TrackpadStatus as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( ovrInputStateHeadset_ )
                , "::" , stringify ! ( TrackpadStatus ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ovrInputStateHeadset_ ) ) .
                TrackpadPosition as * const _ as usize } , 24usize , concat !
                (
                "Alignment of field: " , stringify ! ( ovrInputStateHeadset_ )
                , "::" , stringify ! ( TrackpadPosition ) ));
}
impl Clone for ovrInputStateHeadset_ {
    fn clone(&self) -> Self { *self }
}
pub type ovrInputStateHeadset = ovrInputStateHeadset_;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrFrameInit {
    VRAPI_FRAME_INIT_DEFAULT = 0,
    VRAPI_FRAME_INIT_BLACK = 1,
    VRAPI_FRAME_INIT_BLACK_FLUSH = 2,
    VRAPI_FRAME_INIT_BLACK_FINAL = 3,
    VRAPI_FRAME_INIT_LOADING_ICON = 4,
    VRAPI_FRAME_INIT_LOADING_ICON_FLUSH = 5,
    VRAPI_FRAME_INIT_MESSAGE = 6,
    VRAPI_FRAME_INIT_MESSAGE_FLUSH = 7,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq! (::std::mem::align_of::<__va_list_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( gp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( fp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( overflow_arg_area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( reg_save_area ) ));
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
