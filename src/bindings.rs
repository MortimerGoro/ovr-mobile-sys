/* automatically generated by rust-bindgen */

pub const VRAPI_PRODUCT_VERSION: ::std::os::raw::c_uint = 1;
pub const VRAPI_MAJOR_VERSION: ::std::os::raw::c_uint = 1;
pub const VRAPI_MINOR_VERSION: ::std::os::raw::c_uint = 9;
pub const VRAPI_PATCH_VERSION: ::std::os::raw::c_uint = 0;
pub const VRAPI_BUILD_VERSION: ::std::os::raw::c_uint = 459217;
pub const VRAPI_BUILD_DESCRIPTION: &'static [u8; 12usize] = b"Development\0";
pub const VRAPI_DRIVER_VERSION: ::std::os::raw::c_uint = 74465342;
pub const VRAPI_PI: f64 = 3.141592653589793;
pub const VRAPI_ZNEAR: f64 = 0.1;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct JNINativeInterface {
    _unused: [u8; 0],
}
pub type JNIEnv = *const JNINativeInterface;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct JNIInvokeInterface {
    _unused: [u8; 0],
}
pub type JavaVM = *const JNIInvokeInterface;
pub type jobject = *mut ::std::os::raw::c_void;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrJava {
    pub Vm: *mut JavaVM,
    pub Env: *mut JNIEnv,
    pub ActivityObject: jobject,
}
# [ test ]
fn bindgen_test_layout_ovrJava() {
    assert_eq!(::std::mem::size_of::<ovrJava>(),
               24usize,
               concat!("Size of: ", stringify!(ovrJava)));
    assert_eq!(::std::mem::align_of::<ovrJava>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrJava)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrJava>())).Vm as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrJava),
                       "::",
                       stringify!(Vm)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrJava>())).Env as *const _ as usize },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrJava),
                       "::",
                       stringify!(Env)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrJava>())).ActivityObject as *const _ as usize },
               16usize,
               concat!("Offset of field: ",
                       stringify!(ovrJava),
                       "::",
                       stringify!(ActivityObject)));
}
pub type ovrResult = ::std::os::raw::c_int;
pub const ovrSuccessResult__ovrSuccess: ovrSuccessResult_ = 0;
pub type ovrSuccessResult_ = ::std::os::raw::c_uint;
pub use self::ovrSuccessResult_ as ovrSuccessResult;
pub const ovrErrorResult__ovrError_MemoryAllocationFailure: ovrErrorResult_ = -1000;
pub const ovrErrorResult__ovrError_NotInitialized: ovrErrorResult_ = -1004;
pub const ovrErrorResult__ovrError_InvalidParameter: ovrErrorResult_ = -1005;
pub const ovrErrorResult__ovrError_DeviceUnavailable: ovrErrorResult_ = -1010;
pub const ovrErrorResult__ovrError_InvalidOperation: ovrErrorResult_ = -1015;
pub const ovrErrorResult__ovrError_UnsupportedDeviceType: ovrErrorResult_ = -1050;
pub const ovrErrorResult__ovrError_NoDevice: ovrErrorResult_ = -1051;
pub const ovrErrorResult__ovrError_NotImplemented: ovrErrorResult_ = -1052;
pub const ovrErrorResult__ovrResult_EnumSize: ovrErrorResult_ = 2147483647;
pub type ovrErrorResult_ = ::std::os::raw::c_int;
pub use self::ovrErrorResult_ as ovrErrorResult;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrVector2f_ {
    pub x: f32,
    pub y: f32,
}
# [ test ]
fn bindgen_test_layout_ovrVector2f_() {
    assert_eq!(::std::mem::size_of::<ovrVector2f_>(),
               8usize,
               concat!("Size of: ", stringify!(ovrVector2f_)));
    assert_eq!(::std::mem::align_of::<ovrVector2f_>(),
               4usize,
               concat!("Alignment of ", stringify!(ovrVector2f_)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrVector2f_>())).x as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrVector2f_),
                       "::",
                       stringify!(x)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrVector2f_>())).y as *const _ as usize },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrVector2f_),
                       "::",
                       stringify!(y)));
}
pub type ovrVector2f = ovrVector2f_;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrVector3f_ {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
# [ test ]
fn bindgen_test_layout_ovrVector3f_() {
    assert_eq!(::std::mem::size_of::<ovrVector3f_>(),
               12usize,
               concat!("Size of: ", stringify!(ovrVector3f_)));
    assert_eq!(::std::mem::align_of::<ovrVector3f_>(),
               4usize,
               concat!("Alignment of ", stringify!(ovrVector3f_)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrVector3f_>())).x as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrVector3f_),
                       "::",
                       stringify!(x)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrVector3f_>())).y as *const _ as usize },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrVector3f_),
                       "::",
                       stringify!(y)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrVector3f_>())).z as *const _ as usize },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrVector3f_),
                       "::",
                       stringify!(z)));
}
pub type ovrVector3f = ovrVector3f_;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrVector4f_ {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
# [ test ]
fn bindgen_test_layout_ovrVector4f_() {
    assert_eq!(::std::mem::size_of::<ovrVector4f_>(),
               16usize,
               concat!("Size of: ", stringify!(ovrVector4f_)));
    assert_eq!(::std::mem::align_of::<ovrVector4f_>(),
               4usize,
               concat!("Alignment of ", stringify!(ovrVector4f_)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrVector4f_>())).x as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrVector4f_),
                       "::",
                       stringify!(x)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrVector4f_>())).y as *const _ as usize },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrVector4f_),
                       "::",
                       stringify!(y)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrVector4f_>())).z as *const _ as usize },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrVector4f_),
                       "::",
                       stringify!(z)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrVector4f_>())).w as *const _ as usize },
               12usize,
               concat!("Offset of field: ",
                       stringify!(ovrVector4f_),
                       "::",
                       stringify!(w)));
}
pub type ovrVector4f = ovrVector4f_;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrQuatf_ {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
# [ test ]
fn bindgen_test_layout_ovrQuatf_() {
    assert_eq!(::std::mem::size_of::<ovrQuatf_>(),
               16usize,
               concat!("Size of: ", stringify!(ovrQuatf_)));
    assert_eq!(::std::mem::align_of::<ovrQuatf_>(),
               4usize,
               concat!("Alignment of ", stringify!(ovrQuatf_)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrQuatf_>())).x as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrQuatf_),
                       "::",
                       stringify!(x)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrQuatf_>())).y as *const _ as usize },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrQuatf_),
                       "::",
                       stringify!(y)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrQuatf_>())).z as *const _ as usize },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrQuatf_),
                       "::",
                       stringify!(z)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrQuatf_>())).w as *const _ as usize },
               12usize,
               concat!("Offset of field: ",
                       stringify!(ovrQuatf_),
                       "::",
                       stringify!(w)));
}
pub type ovrQuatf = ovrQuatf_;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrMatrix4f_ {
    pub M: [[f32; 4usize]; 4usize],
}
# [ test ]
fn bindgen_test_layout_ovrMatrix4f_() {
    assert_eq!(::std::mem::size_of::<ovrMatrix4f_>(),
               64usize,
               concat!("Size of: ", stringify!(ovrMatrix4f_)));
    assert_eq!(::std::mem::align_of::<ovrMatrix4f_>(),
               4usize,
               concat!("Alignment of ", stringify!(ovrMatrix4f_)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrMatrix4f_>())).M as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrMatrix4f_),
                       "::",
                       stringify!(M)));
}
pub type ovrMatrix4f = ovrMatrix4f_;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrPosef_ {
    pub Orientation: ovrQuatf,
    pub Position: ovrVector3f,
}
# [ test ]
fn bindgen_test_layout_ovrPosef_() {
    assert_eq!(::std::mem::size_of::<ovrPosef_>(),
               28usize,
               concat!("Size of: ", stringify!(ovrPosef_)));
    assert_eq!(::std::mem::align_of::<ovrPosef_>(),
               4usize,
               concat!("Alignment of ", stringify!(ovrPosef_)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrPosef_>())).Orientation as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrPosef_),
                       "::",
                       stringify!(Orientation)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrPosef_>())).Position as *const _ as usize },
               16usize,
               concat!("Offset of field: ",
                       stringify!(ovrPosef_),
                       "::",
                       stringify!(Position)));
}
pub type ovrPosef = ovrPosef_;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrRectf_ {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
}
# [ test ]
fn bindgen_test_layout_ovrRectf_() {
    assert_eq!(::std::mem::size_of::<ovrRectf_>(),
               16usize,
               concat!("Size of: ", stringify!(ovrRectf_)));
    assert_eq!(::std::mem::align_of::<ovrRectf_>(),
               4usize,
               concat!("Alignment of ", stringify!(ovrRectf_)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrRectf_>())).x as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrRectf_),
                       "::",
                       stringify!(x)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrRectf_>())).y as *const _ as usize },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrRectf_),
                       "::",
                       stringify!(y)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrRectf_>())).width as *const _ as usize },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrRectf_),
                       "::",
                       stringify!(width)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrRectf_>())).height as *const _ as usize },
               12usize,
               concat!("Offset of field: ",
                       stringify!(ovrRectf_),
                       "::",
                       stringify!(height)));
}
pub type ovrRectf = ovrRectf_;
pub const ovrBooleanResult_VRAPI_FALSE: ovrBooleanResult = 0;
pub const ovrBooleanResult_VRAPI_TRUE: ovrBooleanResult = 1;
pub type ovrBooleanResult = ::std::os::raw::c_uint;
pub const ovrEye_VRAPI_EYE_LEFT: ovrEye = 0;
pub const ovrEye_VRAPI_EYE_RIGHT: ovrEye = 1;
pub const ovrEye_VRAPI_EYE_COUNT: ovrEye = 2;
pub type ovrEye = ::std::os::raw::c_uint;
pub const ovrStructureType_VRAPI_STRUCTURE_TYPE_INIT_PARMS: ovrStructureType = 1;
pub const ovrStructureType_VRAPI_STRUCTURE_TYPE_MODE_PARMS: ovrStructureType = 2;
pub const ovrStructureType_VRAPI_STRUCTURE_TYPE_FRAME_PARMS: ovrStructureType = 3;
pub type ovrStructureType = ::std::os::raw::c_uint;
pub const ovrDeviceType_VRAPI_DEVICE_TYPE_GEARVR_START: ovrDeviceType = 0;
pub const ovrDeviceType_VRAPI_DEVICE_TYPE_NOTE4: ovrDeviceType = 0;
pub const ovrDeviceType_VRAPI_DEVICE_TYPE_NOTE5: ovrDeviceType = 1;
pub const ovrDeviceType_VRAPI_DEVICE_TYPE_S6: ovrDeviceType = 2;
pub const ovrDeviceType_VRAPI_DEVICE_TYPE_S7: ovrDeviceType = 3;
pub const ovrDeviceType_VRAPI_DEVICE_TYPE_NOTE7: ovrDeviceType = 4;
pub const ovrDeviceType_VRAPI_DEVICE_TYPE_S8: ovrDeviceType = 5;
pub const ovrDeviceType_VRAPI_DEVICE_TYPE_NOTE8: ovrDeviceType = 6;
pub const ovrDeviceType_VRAPI_DEVICE_TYPE_NOTE7_FE: ovrDeviceType = 7;
pub const ovrDeviceType_VRAPI_DEVICE_GEARVR_END: ovrDeviceType = 63;
pub const ovrDeviceType_VRAPI_DEVICE_TYPE_UNKNOWN: ovrDeviceType = -1;
pub type ovrDeviceType = ::std::os::raw::c_int;
pub const ovrHeadsetType_VRAPI_HEADSET_TYPE_R320: ovrHeadsetType = 0;
pub const ovrHeadsetType_VRAPI_HEADSET_TYPE_R321: ovrHeadsetType = 1;
pub const ovrHeadsetType_VRAPI_HEADSET_TYPE_R322: ovrHeadsetType = 2;
pub const ovrHeadsetType_VRAPI_HEADSET_TYPE_R323: ovrHeadsetType = 3;
pub const ovrHeadsetType_VRAPI_HEADSET_TYPE_R324: ovrHeadsetType = 4;
pub const ovrHeadsetType_VRAPI_HEADSET_TYPE_R325: ovrHeadsetType = 5;
pub const ovrHeadsetType_VRAPI_HEADSET_TYPE_UNKNOWN: ovrHeadsetType = -1;
pub type ovrHeadsetType = ::std::os::raw::c_int;
pub const ovrDeviceRegion_VRAPI_DEVICE_REGION_UNSPECIFIED: ovrDeviceRegion = 0;
pub const ovrDeviceRegion_VRAPI_DEVICE_REGION_JAPAN: ovrDeviceRegion = 1;
pub const ovrDeviceRegion_VRAPI_DEVICE_REGION_CHINA: ovrDeviceRegion = 2;
pub type ovrDeviceRegion = ::std::os::raw::c_uint;
pub const ovrVideoDecoderLimit_VRAPI_VIDEO_DECODER_LIMIT_4K_30FPS: ovrVideoDecoderLimit = 0;
pub const ovrVideoDecoderLimit_VRAPI_VIDEO_DECODER_LIMIT_4K_60FPS: ovrVideoDecoderLimit = 1;
pub type ovrVideoDecoderLimit = ::std::os::raw::c_uint;
pub const ovrSystemProperty_VRAPI_SYS_PROP_DEVICE_TYPE: ovrSystemProperty = 0;
pub const ovrSystemProperty_VRAPI_SYS_PROP_MAX_FULLSPEED_FRAMEBUFFER_SAMPLES: ovrSystemProperty = 1;
pub const ovrSystemProperty_VRAPI_SYS_PROP_DISPLAY_PIXELS_WIDE: ovrSystemProperty = 2;
pub const ovrSystemProperty_VRAPI_SYS_PROP_DISPLAY_PIXELS_HIGH: ovrSystemProperty = 3;
pub const ovrSystemProperty_VRAPI_SYS_PROP_DISPLAY_REFRESH_RATE: ovrSystemProperty = 4;
pub const ovrSystemProperty_VRAPI_SYS_PROP_SUGGESTED_EYE_TEXTURE_WIDTH: ovrSystemProperty = 5;
pub const ovrSystemProperty_VRAPI_SYS_PROP_SUGGESTED_EYE_TEXTURE_HEIGHT: ovrSystemProperty = 6;
pub const ovrSystemProperty_VRAPI_SYS_PROP_SUGGESTED_EYE_FOV_DEGREES_X: ovrSystemProperty = 7;
pub const ovrSystemProperty_VRAPI_SYS_PROP_SUGGESTED_EYE_FOV_DEGREES_Y: ovrSystemProperty = 8;
pub const ovrSystemProperty_VRAPI_SYS_PROP_EXT_SDCARD_PATH: ovrSystemProperty = 9;
pub const ovrSystemProperty_VRAPI_SYS_PROP_DEVICE_REGION: ovrSystemProperty = 10;
pub const ovrSystemProperty_VRAPI_SYS_PROP_VIDEO_DECODER_LIMIT: ovrSystemProperty = 11;
pub const ovrSystemProperty_VRAPI_SYS_PROP_HEADSET_TYPE: ovrSystemProperty = 12;
pub const ovrSystemProperty_VRAPI_SYS_PROP_BACK_BUTTON_SHORTPRESS_TIME: ovrSystemProperty = 13;
pub const ovrSystemProperty_VRAPI_SYS_PROP_BACK_BUTTON_DOUBLETAP_TIME: ovrSystemProperty = 14;
pub const ovrSystemProperty_VRAPI_SYS_PROP_DOMINANT_HAND: ovrSystemProperty = 15;
pub const ovrSystemProperty_VRAPI_SYS_PROP_MULTIVIEW_AVAILABLE: ovrSystemProperty = 128;
pub const ovrSystemProperty_VRAPI_SYS_PROP_SRGB_LAYER_SOURCE_AVAILABLE: ovrSystemProperty = 129;
pub type ovrSystemProperty = ::std::os::raw::c_uint;
pub const ovrHandedness_VRAPI_HAND_UNKNOWN: ovrHandedness = 0;
pub const ovrHandedness_VRAPI_HAND_LEFT: ovrHandedness = 1;
pub const ovrHandedness_VRAPI_HAND_RIGHT: ovrHandedness = 2;
pub type ovrHandedness = ::std::os::raw::c_uint;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_DOCKED: ovrSystemStatus = 0;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_MOUNTED: ovrSystemStatus = 1;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_THROTTLED: ovrSystemStatus = 2;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_RENDER_LATENCY_MILLISECONDS: ovrSystemStatus = 5;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_TIMEWARP_LATENCY_MILLISECONDS: ovrSystemStatus = 6;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_SCANOUT_LATENCY_MILLISECONDS: ovrSystemStatus = 7;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_APP_FRAMES_PER_SECOND: ovrSystemStatus = 8;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_SCREEN_TEARS_PER_SECOND: ovrSystemStatus = 9;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_EARLY_FRAMES_PER_SECOND: ovrSystemStatus = 10;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_STALE_FRAMES_PER_SECOND: ovrSystemStatus = 11;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_RECENTER_COUNT: ovrSystemStatus = 13;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_SYSTEM_UX_ACTIVE: ovrSystemStatus = 14;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_FRONT_BUFFER_PROTECTED: ovrSystemStatus = 128;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_FRONT_BUFFER_565: ovrSystemStatus = 129;
pub const ovrSystemStatus_VRAPI_SYS_STATUS_FRONT_BUFFER_SRGB: ovrSystemStatus = 130;
pub type ovrSystemStatus = ::std::os::raw::c_uint;
pub const ovrInitializeStatus_VRAPI_INITIALIZE_SUCCESS: ovrInitializeStatus = 0;
pub const ovrInitializeStatus_VRAPI_INITIALIZE_UNKNOWN_ERROR: ovrInitializeStatus = -1;
pub const ovrInitializeStatus_VRAPI_INITIALIZE_PERMISSIONS_ERROR: ovrInitializeStatus = -2;
pub type ovrInitializeStatus = ::std::os::raw::c_int;
pub const ovrGraphicsAPI_VRAPI_GRAPHICS_API_OPENGL_ES_2: ovrGraphicsAPI = 66048;
pub const ovrGraphicsAPI_VRAPI_GRAPHICS_API_OPENGL_ES_3: ovrGraphicsAPI = 66304;
pub const ovrGraphicsAPI_VRAPI_GRAPHICS_API_OPENGL_COMPAT: ovrGraphicsAPI = 131328;
pub const ovrGraphicsAPI_VRAPI_GRAPHICS_API_OPENGL_CORE_3: ovrGraphicsAPI = 131840;
pub const ovrGraphicsAPI_VRAPI_GRAPHICS_API_OPENGL_CORE_4: ovrGraphicsAPI = 132096;
pub type ovrGraphicsAPI = ::std::os::raw::c_uint;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrInitParms {
    pub Type: ovrStructureType,
    pub ProductVersion: ::std::os::raw::c_int,
    pub MajorVersion: ::std::os::raw::c_int,
    pub MinorVersion: ::std::os::raw::c_int,
    pub PatchVersion: ::std::os::raw::c_int,
    pub GraphicsAPI: ovrGraphicsAPI,
    pub Java: ovrJava,
}
# [ test ]
fn bindgen_test_layout_ovrInitParms() {
    assert_eq!(::std::mem::size_of::<ovrInitParms>(),
               48usize,
               concat!("Size of: ", stringify!(ovrInitParms)));
    assert_eq!(::std::mem::align_of::<ovrInitParms>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrInitParms)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrInitParms>())).Type as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrInitParms),
                       "::",
                       stringify!(Type)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInitParms>())).ProductVersion as *const _ as usize
               },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrInitParms),
                       "::",
                       stringify!(ProductVersion)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInitParms>())).MajorVersion as *const _ as usize
               },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrInitParms),
                       "::",
                       stringify!(MajorVersion)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInitParms>())).MinorVersion as *const _ as usize
               },
               12usize,
               concat!("Offset of field: ",
                       stringify!(ovrInitParms),
                       "::",
                       stringify!(MinorVersion)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInitParms>())).PatchVersion as *const _ as usize
               },
               16usize,
               concat!("Offset of field: ",
                       stringify!(ovrInitParms),
                       "::",
                       stringify!(PatchVersion)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInitParms>())).GraphicsAPI as *const _ as usize
               },
               20usize,
               concat!("Offset of field: ",
                       stringify!(ovrInitParms),
                       "::",
                       stringify!(GraphicsAPI)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrInitParms>())).Java as *const _ as usize },
               24usize,
               concat!("Offset of field: ",
                       stringify!(ovrInitParms),
                       "::",
                       stringify!(Java)));
}
pub const ovrModeFlags_VRAPI_MODE_FLAG_ALLOW_POWER_SAVE: ovrModeFlags = 255;
pub const ovrModeFlags_VRAPI_MODE_FLAG_RESET_WINDOW_FULLSCREEN: ovrModeFlags = 65280;
pub const ovrModeFlags_VRAPI_MODE_FLAG_NATIVE_WINDOW: ovrModeFlags = 65536;
pub const ovrModeFlags_VRAPI_MODE_FLAG_FRONT_BUFFER_PROTECTED: ovrModeFlags = 131072;
pub const ovrModeFlags_VRAPI_MODE_FLAG_FRONT_BUFFER_565: ovrModeFlags = 262144;
pub const ovrModeFlags_VRAPI_MODE_FLAG_FRONT_BUFFER_SRGB: ovrModeFlags = 524288;
pub type ovrModeFlags = ::std::os::raw::c_uint;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrModeParms {
    pub Type: ovrStructureType,
    pub Flags: ::std::os::raw::c_uint,
    pub Java: ovrJava,
    pub Display: ::std::os::raw::c_ulonglong,
    pub WindowSurface: ::std::os::raw::c_ulonglong,
    pub ShareContext: ::std::os::raw::c_ulonglong,
}
# [ test ]
fn bindgen_test_layout_ovrModeParms() {
    assert_eq!(::std::mem::size_of::<ovrModeParms>(),
               56usize,
               concat!("Size of: ", stringify!(ovrModeParms)));
    assert_eq!(::std::mem::align_of::<ovrModeParms>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrModeParms)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrModeParms>())).Type as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrModeParms),
                       "::",
                       stringify!(Type)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrModeParms>())).Flags as *const _ as usize },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrModeParms),
                       "::",
                       stringify!(Flags)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrModeParms>())).Java as *const _ as usize },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrModeParms),
                       "::",
                       stringify!(Java)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrModeParms>())).Display as *const _ as usize },
               32usize,
               concat!("Offset of field: ",
                       stringify!(ovrModeParms),
                       "::",
                       stringify!(Display)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrModeParms>())).WindowSurface as *const _ as usize
               },
               40usize,
               concat!("Offset of field: ",
                       stringify!(ovrModeParms),
                       "::",
                       stringify!(WindowSurface)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrModeParms>())).ShareContext as *const _ as usize
               },
               48usize,
               concat!("Offset of field: ",
                       stringify!(ovrModeParms),
                       "::",
                       stringify!(ShareContext)));
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrMobile {
    _unused: [u8; 0],
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrRigidBodyPosef_ {
    pub Pose: ovrPosef,
    pub AngularVelocity: ovrVector3f,
    pub LinearVelocity: ovrVector3f,
    pub AngularAcceleration: ovrVector3f,
    pub LinearAcceleration: ovrVector3f,
    pub dead10: [::std::os::raw::c_uchar; 4usize],
    pub TimeInSeconds: f64,
    pub PredictionInSeconds: f64,
}
# [ test ]
fn bindgen_test_layout_ovrRigidBodyPosef_() {
    assert_eq!(::std::mem::size_of::<ovrRigidBodyPosef_>(),
               96usize,
               concat!("Size of: ", stringify!(ovrRigidBodyPosef_)));
    assert_eq!(::std::mem::align_of::<ovrRigidBodyPosef_>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrRigidBodyPosef_)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).Pose as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrRigidBodyPosef_),
                       "::",
                       stringify!(Pose)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).AngularVelocity as *const _ as
                   usize
               },
               28usize,
               concat!("Offset of field: ",
                       stringify!(ovrRigidBodyPosef_),
                       "::",
                       stringify!(AngularVelocity)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).LinearVelocity as *const _ as
                   usize
               },
               40usize,
               concat!("Offset of field: ",
                       stringify!(ovrRigidBodyPosef_),
                       "::",
                       stringify!(LinearVelocity)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).AngularAcceleration as
                   *const _ as usize
               },
               52usize,
               concat!("Offset of field: ",
                       stringify!(ovrRigidBodyPosef_),
                       "::",
                       stringify!(AngularAcceleration)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).LinearAcceleration as *const _ as
                   usize
               },
               64usize,
               concat!("Offset of field: ",
                       stringify!(ovrRigidBodyPosef_),
                       "::",
                       stringify!(LinearAcceleration)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).dead10 as *const _ as usize
               },
               76usize,
               concat!("Offset of field: ",
                       stringify!(ovrRigidBodyPosef_),
                       "::",
                       stringify!(dead10)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).TimeInSeconds as *const _ as usize
               },
               80usize,
               concat!("Offset of field: ",
                       stringify!(ovrRigidBodyPosef_),
                       "::",
                       stringify!(TimeInSeconds)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).PredictionInSeconds as
                   *const _ as usize
               },
               88usize,
               concat!("Offset of field: ",
                       stringify!(ovrRigidBodyPosef_),
                       "::",
                       stringify!(PredictionInSeconds)));
}
pub type ovrRigidBodyPosef = ovrRigidBodyPosef_;
pub const ovrTrackingStatus_VRAPI_TRACKING_STATUS_ORIENTATION_TRACKED: ovrTrackingStatus = 1;
pub const ovrTrackingStatus_VRAPI_TRACKING_STATUS_POSITION_TRACKED: ovrTrackingStatus = 2;
pub const ovrTrackingStatus_VRAPI_TRACKING_STATUS_HMD_CONNECTED: ovrTrackingStatus = 128;
pub type ovrTrackingStatus = ::std::os::raw::c_uint;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrTracking2_ {
    pub Status: ::std::os::raw::c_uint,
    pub dead12: [::std::os::raw::c_uchar; 4usize],
    pub HeadPose: ovrRigidBodyPosef,
    pub Eye: [ovrTracking2___bindgen_ty_1; 2usize],
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrTracking2___bindgen_ty_1 {
    pub ProjectionMatrix: ovrMatrix4f,
    pub ViewMatrix: ovrMatrix4f,
}
# [ test ]
fn bindgen_test_layout_ovrTracking2___bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<ovrTracking2___bindgen_ty_1>(),
               128usize,
               concat!("Size of: ", stringify!(ovrTracking2___bindgen_ty_1)));
    assert_eq!(::std::mem::align_of::<ovrTracking2___bindgen_ty_1>(),
               4usize,
               concat!("Alignment of ", stringify!(ovrTracking2___bindgen_ty_1)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrTracking2___bindgen_ty_1>())).ProjectionMatrix as
                   *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrTracking2___bindgen_ty_1),
                       "::",
                       stringify!(ProjectionMatrix)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrTracking2___bindgen_ty_1>())).ViewMatrix as
                   *const _ as usize
               },
               64usize,
               concat!("Offset of field: ",
                       stringify!(ovrTracking2___bindgen_ty_1),
                       "::",
                       stringify!(ViewMatrix)));
}
# [ test ]
fn bindgen_test_layout_ovrTracking2_() {
    assert_eq!(::std::mem::size_of::<ovrTracking2_>(),
               360usize,
               concat!("Size of: ", stringify!(ovrTracking2_)));
    assert_eq!(::std::mem::align_of::<ovrTracking2_>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrTracking2_)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrTracking2_>())).Status as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrTracking2_),
                       "::",
                       stringify!(Status)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrTracking2_>())).dead12 as *const _ as usize },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrTracking2_),
                       "::",
                       stringify!(dead12)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrTracking2_>())).HeadPose as *const _ as usize },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrTracking2_),
                       "::",
                       stringify!(HeadPose)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrTracking2_>())).Eye as *const _ as usize },
               104usize,
               concat!("Offset of field: ",
                       stringify!(ovrTracking2_),
                       "::",
                       stringify!(Eye)));
}
pub type ovrTracking2 = ovrTracking2_;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrTracking_ {
    pub Status: ::std::os::raw::c_uint,
    pub dead14: [::std::os::raw::c_uchar; 4usize],
    pub HeadPose: ovrRigidBodyPosef,
}
# [ test ]
fn bindgen_test_layout_ovrTracking_() {
    assert_eq!(::std::mem::size_of::<ovrTracking_>(),
               104usize,
               concat!("Size of: ", stringify!(ovrTracking_)));
    assert_eq!(::std::mem::align_of::<ovrTracking_>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrTracking_)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrTracking_>())).Status as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrTracking_),
                       "::",
                       stringify!(Status)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrTracking_>())).dead14 as *const _ as usize },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrTracking_),
                       "::",
                       stringify!(dead14)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrTracking_>())).HeadPose as *const _ as usize },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrTracking_),
                       "::",
                       stringify!(HeadPose)));
}
pub type ovrTracking = ovrTracking_;
pub const ovrTrackingTransform_VRAPI_TRACKING_TRANSFORM_IDENTITY: ovrTrackingTransform = 0;
pub const ovrTrackingTransform_VRAPI_TRACKING_TRANSFORM_CURRENT: ovrTrackingTransform = 1;
pub const ovrTrackingTransform_VRAPI_TRACKING_TRANSFORM_SYSTEM_CENTER_EYE_LEVEL : ovrTrackingTransform = 2 ;
pub const ovrTrackingTransform_VRAPI_TRACKING_TRANSFORM_SYSTEM_CENTER_FLOOR_LEVEL : ovrTrackingTransform = 3 ;
pub type ovrTrackingTransform = ::std::os::raw::c_uint;
pub const ovrTextureType_VRAPI_TEXTURE_TYPE_2D: ovrTextureType = 0;
pub const ovrTextureType_VRAPI_TEXTURE_TYPE_2D_EXTERNAL: ovrTextureType = 1;
pub const ovrTextureType_VRAPI_TEXTURE_TYPE_2D_ARRAY: ovrTextureType = 2;
pub const ovrTextureType_VRAPI_TEXTURE_TYPE_CUBE: ovrTextureType = 3;
pub const ovrTextureType_VRAPI_TEXTURE_TYPE_MAX: ovrTextureType = 4;
pub type ovrTextureType = ::std::os::raw::c_uint;
pub const ovrTextureFormat_VRAPI_TEXTURE_FORMAT_NONE: ovrTextureFormat = 0;
pub const ovrTextureFormat_VRAPI_TEXTURE_FORMAT_565: ovrTextureFormat = 1;
pub const ovrTextureFormat_VRAPI_TEXTURE_FORMAT_5551: ovrTextureFormat = 2;
pub const ovrTextureFormat_VRAPI_TEXTURE_FORMAT_4444: ovrTextureFormat = 3;
pub const ovrTextureFormat_VRAPI_TEXTURE_FORMAT_8888: ovrTextureFormat = 4;
pub const ovrTextureFormat_VRAPI_TEXTURE_FORMAT_8888_sRGB: ovrTextureFormat = 5;
pub const ovrTextureFormat_VRAPI_TEXTURE_FORMAT_RGBA16F: ovrTextureFormat = 6;
pub const ovrTextureFormat_VRAPI_TEXTURE_FORMAT_DEPTH_16: ovrTextureFormat = 7;
pub const ovrTextureFormat_VRAPI_TEXTURE_FORMAT_DEPTH_24: ovrTextureFormat = 8;
pub const ovrTextureFormat_VRAPI_TEXTURE_FORMAT_DEPTH_24_STENCIL_8: ovrTextureFormat = 9;
pub type ovrTextureFormat = ::std::os::raw::c_uint;
pub const ovrDefaultTextureSwapChain_VRAPI_DEFAULT_TEXTURE_SWAPCHAIN: ovrDefaultTextureSwapChain =
    1;
pub const ovrDefaultTextureSwapChain_VRAPI_DEFAULT_TEXTURE_SWAPCHAIN_LOADING_ICON : ovrDefaultTextureSwapChain = 2 ;
pub type ovrDefaultTextureSwapChain = ::std::os::raw::c_uint;
pub const ovrTextureSwapChainSettings_VRAPI_TEXTURE_SWAPCHAIN_FULL_MIP_CHAIN : ovrTextureSwapChainSettings = -1 ;
pub type ovrTextureSwapChainSettings = ::std::os::raw::c_int;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrTextureSwapChain {
    _unused: [u8; 0],
}
pub const ovrFrameFlags_VRAPI_FRAME_FLAG_INHIBIT_SRGB_FRAMEBUFFER: ovrFrameFlags = 1;
pub const ovrFrameFlags_VRAPI_FRAME_FLAG_FLUSH: ovrFrameFlags = 2;
pub const ovrFrameFlags_VRAPI_FRAME_FLAG_FINAL: ovrFrameFlags = 4;
pub const ovrFrameFlags_VRAPI_FRAME_FLAG_INHIBIT_VOLUME_LAYER: ovrFrameFlags = 64;
pub type ovrFrameFlags = ::std::os::raw::c_uint;
pub const ovrFrameLayerFlags_VRAPI_FRAME_LAYER_FLAG_WRITE_ALPHA: ovrFrameLayerFlags = 1;
pub const ovrFrameLayerFlags_VRAPI_FRAME_LAYER_FLAG_CHROMATIC_ABERRATION_CORRECTION : ovrFrameLayerFlags = 2 ;
pub const ovrFrameLayerFlags_VRAPI_FRAME_LAYER_FLAG_FIXED_TO_VIEW: ovrFrameLayerFlags = 4;
pub const ovrFrameLayerFlags_VRAPI_FRAME_LAYER_FLAG_SPIN: ovrFrameLayerFlags = 8;
pub const ovrFrameLayerFlags_VRAPI_FRAME_LAYER_FLAG_CLIP_TO_TEXTURE_RECT: ovrFrameLayerFlags = 16;
pub type ovrFrameLayerFlags = ::std::os::raw::c_uint;
pub const ovrFrameLayerEye_VRAPI_FRAME_LAYER_EYE_LEFT: ovrFrameLayerEye = 0;
pub const ovrFrameLayerEye_VRAPI_FRAME_LAYER_EYE_RIGHT: ovrFrameLayerEye = 1;
pub const ovrFrameLayerEye_VRAPI_FRAME_LAYER_EYE_MAX: ovrFrameLayerEye = 2;
pub type ovrFrameLayerEye = ::std::os::raw::c_uint;
pub const ovrFrameLayerBlend_VRAPI_FRAME_LAYER_BLEND_ZERO: ovrFrameLayerBlend = 0;
pub const ovrFrameLayerBlend_VRAPI_FRAME_LAYER_BLEND_ONE: ovrFrameLayerBlend = 1;
pub const ovrFrameLayerBlend_VRAPI_FRAME_LAYER_BLEND_SRC_ALPHA: ovrFrameLayerBlend = 2;
pub const ovrFrameLayerBlend_VRAPI_FRAME_LAYER_BLEND_DST_ALPHA: ovrFrameLayerBlend = 3;
pub const ovrFrameLayerBlend_VRAPI_FRAME_LAYER_BLEND_ONE_MINUS_DST_ALPHA: ovrFrameLayerBlend = 4;
pub const ovrFrameLayerBlend_VRAPI_FRAME_LAYER_BLEND_ONE_MINUS_SRC_ALPHA: ovrFrameLayerBlend = 5;
pub type ovrFrameLayerBlend = ::std::os::raw::c_uint;
pub const ovrFrameLayerType_VRAPI_FRAME_LAYER_TYPE_MAX: ovrFrameLayerType = 4;
pub type ovrFrameLayerType = ::std::os::raw::c_uint;
pub const ovrExtraLatencyMode_VRAPI_EXTRA_LATENCY_MODE_OFF: ovrExtraLatencyMode = 0;
pub const ovrExtraLatencyMode_VRAPI_EXTRA_LATENCY_MODE_ON: ovrExtraLatencyMode = 1;
pub const ovrExtraLatencyMode_VRAPI_EXTRA_LATENCY_MODE_DYNAMIC: ovrExtraLatencyMode = 2;
pub type ovrExtraLatencyMode = ::std::os::raw::c_uint;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrFrameLayerTexture {
    pub ColorTextureSwapChain: *mut ovrTextureSwapChain,
    pub DepthTextureSwapChain: *mut ovrTextureSwapChain,
    pub TextureSwapChainIndex: ::std::os::raw::c_int,
    pub TexCoordsFromTanAngles: ovrMatrix4f,
    pub TextureRect: ovrRectf,
    pub dead16: [::std::os::raw::c_uchar; 4usize],
    pub HeadPose: ovrRigidBodyPosef,
    pub CompletionFence: ::std::os::raw::c_ulonglong,
}
# [ test ]
fn bindgen_test_layout_ovrFrameLayerTexture() {
    assert_eq!(::std::mem::size_of::<ovrFrameLayerTexture>(),
               208usize,
               concat!("Size of: ", stringify!(ovrFrameLayerTexture)));
    assert_eq!(::std::mem::align_of::<ovrFrameLayerTexture>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrFrameLayerTexture)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameLayerTexture>())).ColorTextureSwapChain as
                   *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayerTexture),
                       "::",
                       stringify!(ColorTextureSwapChain)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameLayerTexture>())).DepthTextureSwapChain as
                   *const _ as usize
               },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayerTexture),
                       "::",
                       stringify!(DepthTextureSwapChain)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameLayerTexture>())).TextureSwapChainIndex as
                   *const _ as usize
               },
               16usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayerTexture),
                       "::",
                       stringify!(TextureSwapChainIndex)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameLayerTexture>())).TexCoordsFromTanAngles as
                   *const _ as usize
               },
               20usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayerTexture),
                       "::",
                       stringify!(TexCoordsFromTanAngles)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameLayerTexture>())).TextureRect as *const _ as usize
               },
               84usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayerTexture),
                       "::",
                       stringify!(TextureRect)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameLayerTexture>())).dead16 as *const _ as usize
               },
               100usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayerTexture),
                       "::",
                       stringify!(dead16)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameLayerTexture>())).HeadPose as *const _ as usize
               },
               104usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayerTexture),
                       "::",
                       stringify!(HeadPose)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameLayerTexture>())).CompletionFence as *const _ as
                   usize
               },
               200usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayerTexture),
                       "::",
                       stringify!(CompletionFence)));
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrFrameLayer {
    pub Textures: [ovrFrameLayerTexture; 2usize],
    pub SpinSpeed: f32,
    pub SpinScale: f32,
    pub ColorScale: f32,
    pub dead18: [::std::os::raw::c_uchar; 4usize],
    pub SrcBlend: ovrFrameLayerBlend,
    pub DstBlend: ovrFrameLayerBlend,
    pub Flags: ::std::os::raw::c_int,
}
# [ test ]
fn bindgen_test_layout_ovrFrameLayer() {
    assert_eq!(::std::mem::size_of::<ovrFrameLayer>(),
               448usize,
               concat!("Size of: ", stringify!(ovrFrameLayer)));
    assert_eq!(::std::mem::align_of::<ovrFrameLayer>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrFrameLayer)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).Textures as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayer),
                       "::",
                       stringify!(Textures)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).SpinSpeed as *const _ as usize },
               416usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayer),
                       "::",
                       stringify!(SpinSpeed)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).SpinScale as *const _ as usize },
               420usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayer),
                       "::",
                       stringify!(SpinScale)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameLayer>())).ColorScale as *const _ as usize
               },
               424usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayer),
                       "::",
                       stringify!(ColorScale)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).dead18 as *const _ as usize },
               428usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayer),
                       "::",
                       stringify!(dead18)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).SrcBlend as *const _ as usize },
               432usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayer),
                       "::",
                       stringify!(SrcBlend)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).DstBlend as *const _ as usize },
               436usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayer),
                       "::",
                       stringify!(DstBlend)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).Flags as *const _ as usize },
               440usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameLayer),
                       "::",
                       stringify!(Flags)));
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrPerformanceParms {
    pub CpuLevel: ::std::os::raw::c_int,
    pub GpuLevel: ::std::os::raw::c_int,
    pub MainThreadTid: ::std::os::raw::c_int,
    pub RenderThreadTid: ::std::os::raw::c_int,
}
# [ test ]
fn bindgen_test_layout_ovrPerformanceParms() {
    assert_eq!(::std::mem::size_of::<ovrPerformanceParms>(),
               16usize,
               concat!("Size of: ", stringify!(ovrPerformanceParms)));
    assert_eq!(::std::mem::align_of::<ovrPerformanceParms>(),
               4usize,
               concat!("Alignment of ", stringify!(ovrPerformanceParms)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrPerformanceParms>())).CpuLevel as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrPerformanceParms),
                       "::",
                       stringify!(CpuLevel)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrPerformanceParms>())).GpuLevel as *const _ as usize
               },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrPerformanceParms),
                       "::",
                       stringify!(GpuLevel)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrPerformanceParms>())).MainThreadTid as *const _ as
                   usize
               },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrPerformanceParms),
                       "::",
                       stringify!(MainThreadTid)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrPerformanceParms>())).RenderThreadTid as *const _ as
                   usize
               },
               12usize,
               concat!("Offset of field: ",
                       stringify!(ovrPerformanceParms),
                       "::",
                       stringify!(RenderThreadTid)));
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrFrameParms {
    pub Type: ovrStructureType,
    pub dead21: [::std::os::raw::c_uchar; 4usize],
    pub Layers: [ovrFrameLayer; 4usize],
    pub LayerCount: ::std::os::raw::c_int,
    pub Flags: ::std::os::raw::c_int,
    pub FrameIndex: ::std::os::raw::c_longlong,
    pub SwapInterval: ::std::os::raw::c_int,
    pub ExtraLatencyMode: ovrExtraLatencyMode,
    pub ExternalVelocity: ovrMatrix4f,
    pub SurfaceTextureObject: jobject,
    pub PerformanceParms: ovrPerformanceParms,
    pub Java: ovrJava,
}
# [ test ]
fn bindgen_test_layout_ovrFrameParms() {
    assert_eq!(::std::mem::size_of::<ovrFrameParms>(),
               1936usize,
               concat!("Size of: ", stringify!(ovrFrameParms)));
    assert_eq!(::std::mem::align_of::<ovrFrameParms>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrFrameParms)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).Type as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameParms),
                       "::",
                       stringify!(Type)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).dead21 as *const _ as usize },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameParms),
                       "::",
                       stringify!(dead21)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).Layers as *const _ as usize },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameParms),
                       "::",
                       stringify!(Layers)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameParms>())).LayerCount as *const _ as usize
               },
               1800usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameParms),
                       "::",
                       stringify!(LayerCount)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).Flags as *const _ as usize },
               1804usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameParms),
                       "::",
                       stringify!(Flags)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameParms>())).FrameIndex as *const _ as usize
               },
               1808usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameParms),
                       "::",
                       stringify!(FrameIndex)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameParms>())).SwapInterval as *const _ as usize
               },
               1816usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameParms),
                       "::",
                       stringify!(SwapInterval)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameParms>())).ExtraLatencyMode as *const _ as usize
               },
               1820usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameParms),
                       "::",
                       stringify!(ExtraLatencyMode)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameParms>())).ExternalVelocity as *const _ as usize
               },
               1824usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameParms),
                       "::",
                       stringify!(ExternalVelocity)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameParms>())).SurfaceTextureObject as *const _ as
                   usize
               },
               1888usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameParms),
                       "::",
                       stringify!(SurfaceTextureObject)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrFrameParms>())).PerformanceParms as *const _ as usize
               },
               1896usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameParms),
                       "::",
                       stringify!(PerformanceParms)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).Java as *const _ as usize },
               1912usize,
               concat!("Offset of field: ",
                       stringify!(ovrFrameParms),
                       "::",
                       stringify!(Java)));
}
pub const ovrLayerType2__VRAPI_LAYER_TYPE_PROJECTION2: ovrLayerType2_ = 1;
pub const ovrLayerType2__VRAPI_LAYER_TYPE_CYLINDER2: ovrLayerType2_ = 3;
pub const ovrLayerType2__VRAPI_LAYER_TYPE_CUBE2: ovrLayerType2_ = 4;
pub const ovrLayerType2__VRAPI_LAYER_TYPE_EQUIRECT2: ovrLayerType2_ = 5;
pub const ovrLayerType2__VRAPI_LAYER_TYPE_LOADING_ICON2: ovrLayerType2_ = 6;
pub type ovrLayerType2_ = ::std::os::raw::c_uint;
pub use self::ovrLayerType2_ as ovrLayerType2;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrLayerHeader2_ {
    pub Type: ovrLayerType2,
    pub Flags: u32,
    pub ColorScale: ovrVector4f,
    pub SrcBlend: ovrFrameLayerBlend,
    pub DstBlend: ovrFrameLayerBlend,
    pub SurfaceTextureObject: jobject,
}
# [ test ]
fn bindgen_test_layout_ovrLayerHeader2_() {
    assert_eq!(::std::mem::size_of::<ovrLayerHeader2_>(),
               40usize,
               concat!("Size of: ", stringify!(ovrLayerHeader2_)));
    assert_eq!(::std::mem::align_of::<ovrLayerHeader2_>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrLayerHeader2_)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrLayerHeader2_>())).Type as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerHeader2_),
                       "::",
                       stringify!(Type)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrLayerHeader2_>())).Flags as *const _ as usize },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerHeader2_),
                       "::",
                       stringify!(Flags)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerHeader2_>())).ColorScale as *const _ as usize
               },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerHeader2_),
                       "::",
                       stringify!(ColorScale)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerHeader2_>())).SrcBlend as *const _ as usize
               },
               24usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerHeader2_),
                       "::",
                       stringify!(SrcBlend)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerHeader2_>())).DstBlend as *const _ as usize
               },
               28usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerHeader2_),
                       "::",
                       stringify!(DstBlend)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerHeader2_>())).SurfaceTextureObject as *const _ as
                   usize
               },
               32usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerHeader2_),
                       "::",
                       stringify!(SurfaceTextureObject)));
}
pub type ovrLayerHeader2 = ovrLayerHeader2_;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrLayerProjection2 {
    pub Header: ovrLayerHeader2,
    pub HeadPose: ovrRigidBodyPosef,
    pub Textures: [ovrLayerProjection2__bindgen_ty_1; 2usize],
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrLayerProjection2__bindgen_ty_1 {
    pub ColorSwapChain: *mut ovrTextureSwapChain,
    pub SwapChainIndex: ::std::os::raw::c_int,
    pub TexCoordsFromTanAngles: ovrMatrix4f,
    pub TextureRect: ovrRectf,
}
# [ test ]
fn bindgen_test_layout_ovrLayerProjection2__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<ovrLayerProjection2__bindgen_ty_1>(),
               96usize,
               concat!("Size of: ", stringify!(ovrLayerProjection2__bindgen_ty_1)));
    assert_eq!(::std::mem::align_of::<ovrLayerProjection2__bindgen_ty_1>(),
               8usize,
               concat!("Alignment of ",
                       stringify!(ovrLayerProjection2__bindgen_ty_1)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerProjection2__bindgen_ty_1>()))
                       .ColorSwapChain as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerProjection2__bindgen_ty_1),
                       "::",
                       stringify!(ColorSwapChain)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerProjection2__bindgen_ty_1>()))
                       .SwapChainIndex as *const _ as usize
               },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerProjection2__bindgen_ty_1),
                       "::",
                       stringify!(SwapChainIndex)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerProjection2__bindgen_ty_1>()))
                       .TexCoordsFromTanAngles as *const _ as usize
               },
               12usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerProjection2__bindgen_ty_1),
                       "::",
                       stringify!(TexCoordsFromTanAngles)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerProjection2__bindgen_ty_1>())).TextureRect as
                   *const _ as usize
               },
               76usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerProjection2__bindgen_ty_1),
                       "::",
                       stringify!(TextureRect)));
}
# [ test ]
fn bindgen_test_layout_ovrLayerProjection2() {
    assert_eq!(::std::mem::size_of::<ovrLayerProjection2>(),
               328usize,
               concat!("Size of: ", stringify!(ovrLayerProjection2)));
    assert_eq!(::std::mem::align_of::<ovrLayerProjection2>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrLayerProjection2)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerProjection2>())).Header as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerProjection2),
                       "::",
                       stringify!(Header)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerProjection2>())).HeadPose as *const _ as usize
               },
               40usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerProjection2),
                       "::",
                       stringify!(HeadPose)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerProjection2>())).Textures as *const _ as usize
               },
               136usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerProjection2),
                       "::",
                       stringify!(Textures)));
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrLayerCylinder2 {
    pub Header: ovrLayerHeader2,
    pub HeadPose: ovrRigidBodyPosef,
    pub Textures: [ovrLayerCylinder2__bindgen_ty_1; 2usize],
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrLayerCylinder2__bindgen_ty_1 {
    pub ColorSwapChain: *mut ovrTextureSwapChain,
    pub SwapChainIndex: ::std::os::raw::c_int,
    pub TexCoordsFromTanAngles: ovrMatrix4f,
    pub TextureRect: ovrRectf,
    pub TextureMatrix: ovrMatrix4f,
}
# [ test ]
fn bindgen_test_layout_ovrLayerCylinder2__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<ovrLayerCylinder2__bindgen_ty_1>(),
               160usize,
               concat!("Size of: ", stringify!(ovrLayerCylinder2__bindgen_ty_1)));
    assert_eq!(::std::mem::align_of::<ovrLayerCylinder2__bindgen_ty_1>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrLayerCylinder2__bindgen_ty_1)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerCylinder2__bindgen_ty_1>()))
                       .ColorSwapChain as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCylinder2__bindgen_ty_1),
                       "::",
                       stringify!(ColorSwapChain)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerCylinder2__bindgen_ty_1>()))
                       .SwapChainIndex as *const _ as usize
               },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCylinder2__bindgen_ty_1),
                       "::",
                       stringify!(SwapChainIndex)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerCylinder2__bindgen_ty_1>()))
                       .TexCoordsFromTanAngles as *const _ as usize
               },
               12usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCylinder2__bindgen_ty_1),
                       "::",
                       stringify!(TexCoordsFromTanAngles)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerCylinder2__bindgen_ty_1>())).TextureRect as
                   *const _ as usize
               },
               76usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCylinder2__bindgen_ty_1),
                       "::",
                       stringify!(TextureRect)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerCylinder2__bindgen_ty_1>())).TextureMatrix as
                   *const _ as usize
               },
               92usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCylinder2__bindgen_ty_1),
                       "::",
                       stringify!(TextureMatrix)));
}
# [ test ]
fn bindgen_test_layout_ovrLayerCylinder2() {
    assert_eq!(::std::mem::size_of::<ovrLayerCylinder2>(),
               456usize,
               concat!("Size of: ", stringify!(ovrLayerCylinder2)));
    assert_eq!(::std::mem::align_of::<ovrLayerCylinder2>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrLayerCylinder2)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerCylinder2>())).Header as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCylinder2),
                       "::",
                       stringify!(Header)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerCylinder2>())).HeadPose as *const _ as usize
               },
               40usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCylinder2),
                       "::",
                       stringify!(HeadPose)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerCylinder2>())).Textures as *const _ as usize
               },
               136usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCylinder2),
                       "::",
                       stringify!(Textures)));
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrLayerCube2 {
    pub Header: ovrLayerHeader2,
    pub HeadPose: ovrRigidBodyPosef,
    pub TexCoordsFromTanAngles: ovrMatrix4f,
    pub Offset: ovrVector3f,
    pub Textures: [ovrLayerCube2__bindgen_ty_1; 2usize],
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrLayerCube2__bindgen_ty_1 {
    pub ColorSwapChain: *mut ovrTextureSwapChain,
    pub SwapChainIndex: ::std::os::raw::c_int,
}
# [ test ]
fn bindgen_test_layout_ovrLayerCube2__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<ovrLayerCube2__bindgen_ty_1>(),
               16usize,
               concat!("Size of: ", stringify!(ovrLayerCube2__bindgen_ty_1)));
    assert_eq!(::std::mem::align_of::<ovrLayerCube2__bindgen_ty_1>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrLayerCube2__bindgen_ty_1)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerCube2__bindgen_ty_1>())).ColorSwapChain as
                   *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCube2__bindgen_ty_1),
                       "::",
                       stringify!(ColorSwapChain)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerCube2__bindgen_ty_1>())).SwapChainIndex as
                   *const _ as usize
               },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCube2__bindgen_ty_1),
                       "::",
                       stringify!(SwapChainIndex)));
}
# [ test ]
fn bindgen_test_layout_ovrLayerCube2() {
    assert_eq!(::std::mem::size_of::<ovrLayerCube2>(),
               248usize,
               concat!("Size of: ", stringify!(ovrLayerCube2)));
    assert_eq!(::std::mem::align_of::<ovrLayerCube2>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrLayerCube2)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrLayerCube2>())).Header as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCube2),
                       "::",
                       stringify!(Header)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrLayerCube2>())).HeadPose as *const _ as usize },
               40usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCube2),
                       "::",
                       stringify!(HeadPose)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerCube2>())).TexCoordsFromTanAngles as *const _ as
                   usize
               },
               136usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCube2),
                       "::",
                       stringify!(TexCoordsFromTanAngles)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrLayerCube2>())).Offset as *const _ as usize },
               200usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCube2),
                       "::",
                       stringify!(Offset)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrLayerCube2>())).Textures as *const _ as usize },
               216usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerCube2),
                       "::",
                       stringify!(Textures)));
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrLayerEquirect2 {
    pub Header: ovrLayerHeader2,
    pub HeadPose: ovrRigidBodyPosef,
    pub TexCoordsFromTanAngles: ovrMatrix4f,
    pub Textures: [ovrLayerEquirect2__bindgen_ty_1; 2usize],
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrLayerEquirect2__bindgen_ty_1 {
    pub ColorSwapChain: *mut ovrTextureSwapChain,
    pub SwapChainIndex: ::std::os::raw::c_int,
    pub TextureRect: ovrRectf,
    pub TextureMatrix: ovrMatrix4f,
}
# [ test ]
fn bindgen_test_layout_ovrLayerEquirect2__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<ovrLayerEquirect2__bindgen_ty_1>(),
               96usize,
               concat!("Size of: ", stringify!(ovrLayerEquirect2__bindgen_ty_1)));
    assert_eq!(::std::mem::align_of::<ovrLayerEquirect2__bindgen_ty_1>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrLayerEquirect2__bindgen_ty_1)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerEquirect2__bindgen_ty_1>()))
                       .ColorSwapChain as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerEquirect2__bindgen_ty_1),
                       "::",
                       stringify!(ColorSwapChain)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerEquirect2__bindgen_ty_1>()))
                       .SwapChainIndex as *const _ as usize
               },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerEquirect2__bindgen_ty_1),
                       "::",
                       stringify!(SwapChainIndex)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerEquirect2__bindgen_ty_1>())).TextureRect as
                   *const _ as usize
               },
               12usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerEquirect2__bindgen_ty_1),
                       "::",
                       stringify!(TextureRect)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerEquirect2__bindgen_ty_1>())).TextureMatrix as
                   *const _ as usize
               },
               28usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerEquirect2__bindgen_ty_1),
                       "::",
                       stringify!(TextureMatrix)));
}
# [ test ]
fn bindgen_test_layout_ovrLayerEquirect2() {
    assert_eq!(::std::mem::size_of::<ovrLayerEquirect2>(),
               392usize,
               concat!("Size of: ", stringify!(ovrLayerEquirect2)));
    assert_eq!(::std::mem::align_of::<ovrLayerEquirect2>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrLayerEquirect2)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerEquirect2>())).Header as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerEquirect2),
                       "::",
                       stringify!(Header)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerEquirect2>())).HeadPose as *const _ as usize
               },
               40usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerEquirect2),
                       "::",
                       stringify!(HeadPose)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerEquirect2>())).TexCoordsFromTanAngles as
                   *const _ as usize
               },
               136usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerEquirect2),
                       "::",
                       stringify!(TexCoordsFromTanAngles)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerEquirect2>())).Textures as *const _ as usize
               },
               200usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerEquirect2),
                       "::",
                       stringify!(Textures)));
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrLayerLoadingIcon2 {
    pub Header: ovrLayerHeader2,
    pub SpinSpeed: f32,
    pub SpinScale: f32,
    pub ColorSwapChain: *mut ovrTextureSwapChain,
    pub SwapChainIndex: ::std::os::raw::c_int,
}
# [ test ]
fn bindgen_test_layout_ovrLayerLoadingIcon2() {
    assert_eq!(::std::mem::size_of::<ovrLayerLoadingIcon2>(),
               64usize,
               concat!("Size of: ", stringify!(ovrLayerLoadingIcon2)));
    assert_eq!(::std::mem::align_of::<ovrLayerLoadingIcon2>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrLayerLoadingIcon2)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerLoadingIcon2>())).Header as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerLoadingIcon2),
                       "::",
                       stringify!(Header)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerLoadingIcon2>())).SpinSpeed as *const _ as usize
               },
               40usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerLoadingIcon2),
                       "::",
                       stringify!(SpinSpeed)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerLoadingIcon2>())).SpinScale as *const _ as usize
               },
               44usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerLoadingIcon2),
                       "::",
                       stringify!(SpinScale)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerLoadingIcon2>())).ColorSwapChain as *const _ as
                   usize
               },
               48usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerLoadingIcon2),
                       "::",
                       stringify!(ColorSwapChain)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayerLoadingIcon2>())).SwapChainIndex as *const _ as
                   usize
               },
               56usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayerLoadingIcon2),
                       "::",
                       stringify!(SwapChainIndex)));
}
# [ repr ( C ) ]
# [ derive ( Copy , Clone ) ]; 57usize ] , }# [ test ]
fn bindgen_test_layout_ovrLayer_Union2() {
    assert_eq!(::std::mem::size_of::<ovrLayer_Union2>(),
               456usize,
               concat!("Size of: ", stringify!(ovrLayer_Union2)));
    assert_eq!(::std::mem::align_of::<ovrLayer_Union2>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrLayer_Union2)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrLayer_Union2>())).Header as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayer_Union2),
                       "::",
                       stringify!(Header)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayer_Union2>())).Projection as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayer_Union2),
                       "::",
                       stringify!(Projection)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayer_Union2>())).Cylinder as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayer_Union2),
                       "::",
                       stringify!(Cylinder)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ovrLayer_Union2>())).Cube as *const _ as usize },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayer_Union2),
                       "::",
                       stringify!(Cube)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayer_Union2>())).Equirect as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayer_Union2),
                       "::",
                       stringify!(Equirect)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrLayer_Union2>())).LoadingIcon as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrLayer_Union2),
                       "::",
                       stringify!(LoadingIcon)));
}
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrSubmitFrameDescription2_ {
    pub Flags: u32,
    pub SwapInterval: u32,
    pub FrameIndex: u64,
    pub DisplayTime: f64,
    pub CompletionFence: ::std::os::raw::c_ulonglong,
    pub LayerCount: u32,
    pub Layers: *const *const ovrLayerHeader2,
}
# [ test ]
fn bindgen_test_layout_ovrSubmitFrameDescription2_() {
    assert_eq!(::std::mem::size_of::<ovrSubmitFrameDescription2_>(),
               48usize,
               concat!("Size of: ", stringify!(ovrSubmitFrameDescription2_)));
    assert_eq!(::std::mem::align_of::<ovrSubmitFrameDescription2_>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrSubmitFrameDescription2_)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).Flags as *const _ as
                   usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrSubmitFrameDescription2_),
                       "::",
                       stringify!(Flags)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).SwapInterval as
                   *const _ as usize
               },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrSubmitFrameDescription2_),
                       "::",
                       stringify!(SwapInterval)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).FrameIndex as
                   *const _ as usize
               },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrSubmitFrameDescription2_),
                       "::",
                       stringify!(FrameIndex)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).DisplayTime as
                   *const _ as usize
               },
               16usize,
               concat!("Offset of field: ",
                       stringify!(ovrSubmitFrameDescription2_),
                       "::",
                       stringify!(DisplayTime)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).CompletionFence as
                   *const _ as usize
               },
               24usize,
               concat!("Offset of field: ",
                       stringify!(ovrSubmitFrameDescription2_),
                       "::",
                       stringify!(CompletionFence)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).LayerCount as
                   *const _ as usize
               },
               32usize,
               concat!("Offset of field: ",
                       stringify!(ovrSubmitFrameDescription2_),
                       "::",
                       stringify!(LayerCount)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).Layers as *const _ as
                   usize
               },
               40usize,
               concat!("Offset of field: ",
                       stringify!(ovrSubmitFrameDescription2_),
                       "::",
                       stringify!(Layers)));
}
pub type ovrSubmitFrameDescription2 = ovrSubmitFrameDescription2_;
pub const ovrPerfThreadType_VRAPI_PERF_THREAD_TYPE_MAIN: ovrPerfThreadType = 0;
pub const ovrPerfThreadType_VRAPI_PERF_THREAD_TYPE_RENDERER: ovrPerfThreadType = 1;
pub type ovrPerfThreadType = ::std::os::raw::c_uint;
extern "C" {
    pub fn vrapi_GetVersionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn vrapi_GetTimeInSeconds() -> f64;
}
extern "C" {
    pub fn vrapi_Initialize(initParms: *const ovrInitParms) -> ovrInitializeStatus;
}
extern "C" {
    pub fn vrapi_Shutdown();
}
extern "C" {
    pub fn vrapi_GetSystemPropertyInt(java: *const ovrJava,
                                      propType: ovrSystemProperty)
                                      -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vrapi_GetSystemPropertyFloat(java: *const ovrJava, propType: ovrSystemProperty) -> f32;
}
extern "C" {
    pub fn vrapi_GetSystemPropertyString(java: *const ovrJava,
                                         propType: ovrSystemProperty)
                                         -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn vrapi_GetSystemStatusInt(java: *const ovrJava,
                                    statusType: ovrSystemStatus)
                                    -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vrapi_GetSystemStatusFloat(java: *const ovrJava, statusType: ovrSystemStatus) -> f32;
}
extern "C" {
    pub fn vrapi_EnterVrMode(parms: *const ovrModeParms) -> *mut ovrMobile;
}
extern "C" {
    pub fn vrapi_LeaveVrMode(ovr: *mut ovrMobile);
}
extern "C" {
    pub fn vrapi_GetPredictedDisplayTime(ovr: *mut ovrMobile,
                                         frameIndex: ::std::os::raw::c_longlong)
                                         -> f64;
}
extern "C" {
    pub fn vrapi_GetPredictedTracking2(ovr: *mut ovrMobile, absTimeInSeconds: f64) -> ovrTracking2;
}
extern "C" {
    pub fn vrapi_GetPredictedTracking(ovr: *mut ovrMobile, absTimeInSeconds: f64) -> ovrTracking;
}
extern "C" {
    pub fn vrapi_RecenterPose(ovr: *mut ovrMobile);
}
extern "C" {
    pub fn vrapi_GetTrackingTransform(ovr: *mut ovrMobile,
                                      whichTransform: ovrTrackingTransform)
                                      -> ovrPosef;
}
extern "C" {
    pub fn vrapi_SetTrackingTransform(ovr: *mut ovrMobile, pose: ovrPosef);
}
extern "C" {
    pub fn vrapi_CreateTextureSwapChain2(type_: ovrTextureType,
                                         format: ovrTextureFormat,
                                         width: ::std::os::raw::c_int,
                                         height: ::std::os::raw::c_int,
                                         levels: ::std::os::raw::c_int,
                                         bufferCount: ::std::os::raw::c_int)
                                         -> *mut ovrTextureSwapChain;
}
extern "C" {
    pub fn vrapi_CreateTextureSwapChain(type_: ovrTextureType,
                                        format: ovrTextureFormat,
                                        width: ::std::os::raw::c_int,
                                        height: ::std::os::raw::c_int,
                                        levels: ::std::os::raw::c_int,
                                        buffered: bool)
                                        -> *mut ovrTextureSwapChain;
}
extern "C" {
    pub fn vrapi_DestroyTextureSwapChain(chain: *mut ovrTextureSwapChain);
}
extern "C" {
    pub fn vrapi_GetTextureSwapChainLength(chain: *mut ovrTextureSwapChain)
                                           -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vrapi_GetTextureSwapChainHandle(chain: *mut ovrTextureSwapChain,
                                           index: ::std::os::raw::c_int)
                                           -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn vrapi_SetTextureSwapChainHandle(chain: *mut ovrTextureSwapChain,
                                           index: ::std::os::raw::c_int,
                                           handle: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn vrapi_SubmitFrame(ovr: *mut ovrMobile, parms: *const ovrFrameParms);
}
extern "C" {
    pub fn vrapi_SubmitFrame2(ovr: *mut ovrMobile,
                              frameDescription: *const ovrSubmitFrameDescription2)
                              -> ovrResult;
}
extern "C" {
    pub fn vrapi_SetClockLevels(ovr: *mut ovrMobile, cpuLevel: i32, gpuLevel: i32) -> ovrResult;
}
extern "C" {
    pub fn vrapi_SetPerfThread(ovr: *mut ovrMobile,
                               type_: ovrPerfThreadType,
                               threadId: u32)
                               -> ovrResult;
}
extern "C" {
    pub fn vrapi_SetExtraLatencyMode(ovr: *mut ovrMobile, mode: ovrExtraLatencyMode) -> ovrResult;
}
pub const ovrButton__ovrButton_A: ovrButton_ = 1;
pub const ovrButton__ovrButton_B: ovrButton_ = 2;
pub const ovrButton__ovrButton_RThumb: ovrButton_ = 4;
pub const ovrButton__ovrButton_RShoulder: ovrButton_ = 8;
pub const ovrButton__ovrButton_X: ovrButton_ = 256;
pub const ovrButton__ovrButton_Y: ovrButton_ = 512;
pub const ovrButton__ovrButton_LThumb: ovrButton_ = 1024;
pub const ovrButton__ovrButton_LShoulder: ovrButton_ = 2048;
pub const ovrButton__ovrButton_Up: ovrButton_ = 65536;
pub const ovrButton__ovrButton_Down: ovrButton_ = 131072;
pub const ovrButton__ovrButton_Left: ovrButton_ = 262144;
pub const ovrButton__ovrButton_Right: ovrButton_ = 524288;
pub const ovrButton__ovrButton_Enter: ovrButton_ = 1048576;
pub const ovrButton__ovrButton_Back: ovrButton_ = 2097152;
pub const ovrButton__ovrButton_EnumSize: ovrButton_ = 2147483647;
pub type ovrButton_ = ::std::os::raw::c_uint;
pub use self::ovrButton_ as ovrButton;
pub const ovrControllerType__ovrControllerType_None: ovrControllerType_ = 0;
pub const ovrControllerType__ovrControllerType_Reserved0: ovrControllerType_ = 1;
pub const ovrControllerType__ovrControllerType_Reserved1: ovrControllerType_ = 2;
pub const ovrControllerType__ovrControllerType_TrackedRemote: ovrControllerType_ = 4;
pub const ovrControllerType__ovrControllerType_Headset: ovrControllerType_ = 8;
pub const ovrControllerType__ovrControllerType_Reserved2: ovrControllerType_ = 16;
pub const ovrControllerType__ovrControllerType_EnumSize: ovrControllerType_ = 2147483647;
pub type ovrControllerType_ = ::std::os::raw::c_uint;
pub use self::ovrControllerType_ as ovrControllerType;
pub type ovrDeviceID = u32;
pub const ovrDeviceIdType__ovrDeviceIdType_Invalid: ovrDeviceIdType_ = 2147483647;
pub type ovrDeviceIdType_ = ::std::os::raw::c_uint;
pub use self::ovrDeviceIdType_ as ovrDeviceIdType;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrInputCapabilityHeader_ {
    pub Type: ovrControllerType,
    pub DeviceID: ovrDeviceID,
}
# [ test ]
fn bindgen_test_layout_ovrInputCapabilityHeader_() {
    assert_eq!(::std::mem::size_of::<ovrInputCapabilityHeader_>(),
               8usize,
               concat!("Size of: ", stringify!(ovrInputCapabilityHeader_)));
    assert_eq!(::std::mem::align_of::<ovrInputCapabilityHeader_>(),
               4usize,
               concat!("Alignment of ", stringify!(ovrInputCapabilityHeader_)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputCapabilityHeader_>())).Type as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputCapabilityHeader_),
                       "::",
                       stringify!(Type)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputCapabilityHeader_>())).DeviceID as *const _ as
                   usize
               },
               4usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputCapabilityHeader_),
                       "::",
                       stringify!(DeviceID)));
}
pub type ovrInputCapabilityHeader = ovrInputCapabilityHeader_;
pub const ovrControllerCapabilities__ovrControllerCaps_HasOrientationTracking : ovrControllerCapabilities_ = 1 ;
pub const ovrControllerCapabilities__ovrControllerCaps_HasPositionTracking : ovrControllerCapabilities_ = 2 ;
pub const ovrControllerCapabilities__ovrControllerCaps_LeftHand: ovrControllerCapabilities_ = 4;
pub const ovrControllerCapabilities__ovrControllerCaps_RightHand: ovrControllerCapabilities_ = 8;
pub const ovrControllerCapabilities__ovrControllerCaps_EnumSize: ovrControllerCapabilities_ =
    2147483647;
pub type ovrControllerCapabilities_ = ::std::os::raw::c_uint;
pub use self::ovrControllerCapabilities_ as ovrControllerCapabilties;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrInputTrackedRemoteCapabilities_ {
    pub Header: ovrInputCapabilityHeader,
    pub ControllerCapabilities: u32,
    pub ButtonCapabilities: u32,
    pub TrackpadMaxX: u16,
    pub TrackpadMaxY: u16,
    pub TrackpadSizeX: f32,
    pub TrackpadSizeY: f32,
}
# [ test ]
fn bindgen_test_layout_ovrInputTrackedRemoteCapabilities_() {
    assert_eq!(::std::mem::size_of::<ovrInputTrackedRemoteCapabilities_>(),
               28usize,
               concat!("Size of: ", stringify!(ovrInputTrackedRemoteCapabilities_)));
    assert_eq!(::std::mem::align_of::<ovrInputTrackedRemoteCapabilities_>(),
               4usize,
               concat!("Alignment of ",
                       stringify!(ovrInputTrackedRemoteCapabilities_)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>())).Header as
                   *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputTrackedRemoteCapabilities_),
                       "::",
                       stringify!(Header)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>()))
                       .ControllerCapabilities as *const _ as usize
               },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputTrackedRemoteCapabilities_),
                       "::",
                       stringify!(ControllerCapabilities)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>()))
                       .ButtonCapabilities as *const _ as usize
               },
               12usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputTrackedRemoteCapabilities_),
                       "::",
                       stringify!(ButtonCapabilities)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>()))
                       .TrackpadMaxX as *const _ as usize
               },
               16usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputTrackedRemoteCapabilities_),
                       "::",
                       stringify!(TrackpadMaxX)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>()))
                       .TrackpadMaxY as *const _ as usize
               },
               18usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputTrackedRemoteCapabilities_),
                       "::",
                       stringify!(TrackpadMaxY)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>()))
                       .TrackpadSizeX as *const _ as usize
               },
               20usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputTrackedRemoteCapabilities_),
                       "::",
                       stringify!(TrackpadSizeX)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>()))
                       .TrackpadSizeY as *const _ as usize
               },
               24usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputTrackedRemoteCapabilities_),
                       "::",
                       stringify!(TrackpadSizeY)));
}
pub type ovrInputTrackedRemoteCapabilities = ovrInputTrackedRemoteCapabilities_;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrInputHeadsetCapabilities_ {
    pub Header: ovrInputCapabilityHeader,
    pub ControllerCapabilities: u32,
    pub ButtonCapabilities: u32,
    pub TrackpadMaxX: u16,
    pub TrackpadMaxY: u16,
    pub TrackpadSizeX: f32,
    pub TrackpadSizeY: f32,
}
# [ test ]
fn bindgen_test_layout_ovrInputHeadsetCapabilities_() {
    assert_eq!(::std::mem::size_of::<ovrInputHeadsetCapabilities_>(),
               28usize,
               concat!("Size of: ", stringify!(ovrInputHeadsetCapabilities_)));
    assert_eq!(::std::mem::align_of::<ovrInputHeadsetCapabilities_>(),
               4usize,
               concat!("Alignment of ", stringify!(ovrInputHeadsetCapabilities_)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>())).Header as *const _ as
                   usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputHeadsetCapabilities_),
                       "::",
                       stringify!(Header)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>()))
                       .ControllerCapabilities as *const _ as usize
               },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputHeadsetCapabilities_),
                       "::",
                       stringify!(ControllerCapabilities)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>()))
                       .ButtonCapabilities as *const _ as usize
               },
               12usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputHeadsetCapabilities_),
                       "::",
                       stringify!(ButtonCapabilities)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>())).TrackpadMaxX as
                   *const _ as usize
               },
               16usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputHeadsetCapabilities_),
                       "::",
                       stringify!(TrackpadMaxX)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>())).TrackpadMaxY as
                   *const _ as usize
               },
               18usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputHeadsetCapabilities_),
                       "::",
                       stringify!(TrackpadMaxY)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>())).TrackpadSizeX as
                   *const _ as usize
               },
               20usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputHeadsetCapabilities_),
                       "::",
                       stringify!(TrackpadSizeX)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>())).TrackpadSizeY as
                   *const _ as usize
               },
               24usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputHeadsetCapabilities_),
                       "::",
                       stringify!(TrackpadSizeY)));
}
pub type ovrInputHeadsetCapabilities = ovrInputHeadsetCapabilities_;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrInputStateHeader_ {
    pub ControllerType: ovrControllerType,
    pub TimeInSeconds: f64,
}
# [ test ]
fn bindgen_test_layout_ovrInputStateHeader_() {
    assert_eq!(::std::mem::size_of::<ovrInputStateHeader_>(),
               16usize,
               concat!("Size of: ", stringify!(ovrInputStateHeader_)));
    assert_eq!(::std::mem::align_of::<ovrInputStateHeader_>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrInputStateHeader_)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputStateHeader_>())).ControllerType as *const _ as
                   usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputStateHeader_),
                       "::",
                       stringify!(ControllerType)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputStateHeader_>())).TimeInSeconds as *const _ as
                   usize
               },
               8usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputStateHeader_),
                       "::",
                       stringify!(TimeInSeconds)));
}
pub type ovrInputStateHeader = ovrInputStateHeader_;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrInputStateTrackedRemote_ {
    pub Header: ovrInputStateHeader,
    pub Buttons: u32,
    pub TrackpadStatus: u32,
    pub TrackpadPosition: ovrVector2f,
    pub BatteryPercentRemaining: u8,
    pub RecenterCount: u8,
    pub Reserved: u16,
}
# [ test ]
fn bindgen_test_layout_ovrInputStateTrackedRemote_() {
    assert_eq!(::std::mem::size_of::<ovrInputStateTrackedRemote_>(),
               40usize,
               concat!("Size of: ", stringify!(ovrInputStateTrackedRemote_)));
    assert_eq!(::std::mem::align_of::<ovrInputStateTrackedRemote_>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrInputStateTrackedRemote_)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>())).Header as *const _ as
                   usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputStateTrackedRemote_),
                       "::",
                       stringify!(Header)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>())).Buttons as *const _ as
                   usize
               },
               16usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputStateTrackedRemote_),
                       "::",
                       stringify!(Buttons)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>())).TrackpadStatus as
                   *const _ as usize
               },
               20usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputStateTrackedRemote_),
                       "::",
                       stringify!(TrackpadStatus)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>())).TrackpadPosition as
                   *const _ as usize
               },
               24usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputStateTrackedRemote_),
                       "::",
                       stringify!(TrackpadPosition)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>()))
                       .BatteryPercentRemaining as *const _ as usize
               },
               32usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputStateTrackedRemote_),
                       "::",
                       stringify!(BatteryPercentRemaining)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>())).RecenterCount as
                   *const _ as usize
               },
               33usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputStateTrackedRemote_),
                       "::",
                       stringify!(RecenterCount)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>())).Reserved as *const _ as
                   usize
               },
               34usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputStateTrackedRemote_),
                       "::",
                       stringify!(Reserved)));
}
pub type ovrInputStateTrackedRemote = ovrInputStateTrackedRemote_;
# [ repr ( C ) ]
# [ derive ( Debug , Copy , Clone ) ]
pub struct ovrInputStateHeadset_ {
    pub Header: ovrInputStateHeader,
    pub Buttons: u32,
    pub TrackpadStatus: u32,
    pub TrackpadPosition: ovrVector2f,
}
# [ test ]
fn bindgen_test_layout_ovrInputStateHeadset_() {
    assert_eq!(::std::mem::size_of::<ovrInputStateHeadset_>(),
               32usize,
               concat!("Size of: ", stringify!(ovrInputStateHeadset_)));
    assert_eq!(::std::mem::align_of::<ovrInputStateHeadset_>(),
               8usize,
               concat!("Alignment of ", stringify!(ovrInputStateHeadset_)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputStateHeadset_>())).Header as *const _ as usize
               },
               0usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputStateHeadset_),
                       "::",
                       stringify!(Header)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputStateHeadset_>())).Buttons as *const _ as usize
               },
               16usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputStateHeadset_),
                       "::",
                       stringify!(Buttons)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputStateHeadset_>())).TrackpadStatus as *const _ as
                   usize
               },
               20usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputStateHeadset_),
                       "::",
                       stringify!(TrackpadStatus)));
    assert_eq!(unsafe {
                   &(*(::std::ptr::null::<ovrInputStateHeadset_>())).TrackpadPosition as
                   *const _ as usize
               },
               24usize,
               concat!("Offset of field: ",
                       stringify!(ovrInputStateHeadset_),
                       "::",
                       stringify!(TrackpadPosition)));
}
pub type ovrInputStateHeadset = ovrInputStateHeadset_;
extern "C" {
    pub fn vrapi_EnumerateInputDevices(ovr: *mut ovrMobile,
                                       index: u32,
                                       capsHeader: *mut ovrInputCapabilityHeader)
                                       -> ovrResult;
}
extern "C" {
    pub fn vrapi_GetInputDeviceCapabilities(ovr: *mut ovrMobile,
                                            capsHeader: *mut ovrInputCapabilityHeader)
                                            -> ovrResult;
}
extern "C" {
    pub fn vrapi_GetCurrentInputState(ovr: *mut ovrMobile,
                                      deviceID: ovrDeviceID,
                                      inputState: *mut ovrInputStateHeader)
                                      -> ovrResult;
}
extern "C" {
    pub fn vrapi_GetInputTrackingState(ovr: *mut ovrMobile,
                                       deviceID: ovrDeviceID,
                                       absTimeInSeconds: f64,
                                       tracking: *mut ovrTracking)
                                       -> ovrResult;
}
extern "C" {
    pub fn vrapi_RecenterInputPose(ovr: *mut ovrMobile, deviceID: ovrDeviceID);
}
extern "C" {
    pub fn vrapi_SetRemoteEmulation(ovr: *mut ovrMobile, emulationOn: bool) -> ovrResult;
}
pub const ovrFrameInit_VRAPI_FRAME_INIT_DEFAULT: ovrFrameInit = 0;
pub const ovrFrameInit_VRAPI_FRAME_INIT_BLACK: ovrFrameInit = 1;
pub const ovrFrameInit_VRAPI_FRAME_INIT_BLACK_FLUSH: ovrFrameInit = 2;
pub const ovrFrameInit_VRAPI_FRAME_INIT_BLACK_FINAL: ovrFrameInit = 3;
pub const ovrFrameInit_VRAPI_FRAME_INIT_LOADING_ICON: ovrFrameInit = 4;
pub const ovrFrameInit_VRAPI_FRAME_INIT_LOADING_ICON_FLUSH: ovrFrameInit = 5;
pub type ovrFrameInit = ::std::os::raw::c_uint;
