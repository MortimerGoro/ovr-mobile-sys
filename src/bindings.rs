/* automatically generated by rust-bindgen */

pub const VRAPI_PRODUCT_VERSION: ::std::os::raw::c_uint = 1;
pub const VRAPI_MAJOR_VERSION: ::std::os::raw::c_uint = 1;
pub const VRAPI_MINOR_VERSION: ::std::os::raw::c_uint = 9;
pub const VRAPI_PATCH_VERSION: ::std::os::raw::c_uint = 0;
pub const VRAPI_BUILD_VERSION: ::std::os::raw::c_uint = 459217;
pub const VRAPI_BUILD_DESCRIPTION: &'static [u8; 12usize] = b"Development\0";
pub const VRAPI_DRIVER_VERSION: ::std::os::raw::c_uint = 74465342;
pub const VRAPI_PI: f64 = 3.141592653589793;
pub const VRAPI_ZNEAR: f64 = 0.1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNINativeInterface {
    _unused: [u8; 0],
}
pub type JNIEnv = *const JNINativeInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNIInvokeInterface {
    _unused: [u8; 0],
}
pub type JavaVM = *const JNIInvokeInterface;
pub type jobject = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrJava {
    pub Vm: *mut JavaVM,
    pub Env: *mut JNIEnv,
    pub ActivityObject: jobject,
}
#[test]
fn bindgen_test_layout_ovrJava() {
    assert_eq!(
        ::std::mem::size_of::<ovrJava>(),
        24usize,
        concat!("Size of: ", stringify!(ovrJava))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrJava>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrJava))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrJava>())).Vm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrJava),
            "::",
            stringify!(Vm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrJava>())).Env as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrJava),
            "::",
            stringify!(Env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrJava>())).ActivityObject as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrJava),
            "::",
            stringify!(ActivityObject)
        )
    );
}
pub type ovrResult = ::std::os::raw::c_int;
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrSuccessResult_ {
    ovrSuccess = 0,
}
pub use self::ovrSuccessResult_ as ovrSuccessResult;
#[repr(i32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrErrorResult_ {
    ovrError_MemoryAllocationFailure = -1000,
    ovrError_NotInitialized = -1004,
    ovrError_InvalidParameter = -1005,
    ovrError_DeviceUnavailable = -1010,
    ovrError_InvalidOperation = -1015,
    ovrError_UnsupportedDeviceType = -1050,
    ovrError_NoDevice = -1051,
    ovrError_NotImplemented = -1052,
    ovrResult_EnumSize = 2147483647,
}
pub use self::ovrErrorResult_ as ovrErrorResult;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrVector2f_ {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_ovrVector2f_() {
    assert_eq!(
        ::std::mem::size_of::<ovrVector2f_>(),
        8usize,
        concat!("Size of: ", stringify!(ovrVector2f_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrVector2f_>(),
        4usize,
        concat!("Alignment of ", stringify!(ovrVector2f_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrVector2f_>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrVector2f_),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrVector2f_>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrVector2f_),
            "::",
            stringify!(y)
        )
    );
}
pub type ovrVector2f = ovrVector2f_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrVector3f_ {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_ovrVector3f_() {
    assert_eq!(
        ::std::mem::size_of::<ovrVector3f_>(),
        12usize,
        concat!("Size of: ", stringify!(ovrVector3f_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrVector3f_>(),
        4usize,
        concat!("Alignment of ", stringify!(ovrVector3f_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrVector3f_>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrVector3f_),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrVector3f_>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrVector3f_),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrVector3f_>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrVector3f_),
            "::",
            stringify!(z)
        )
    );
}
pub type ovrVector3f = ovrVector3f_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrVector4f_ {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_ovrVector4f_() {
    assert_eq!(
        ::std::mem::size_of::<ovrVector4f_>(),
        16usize,
        concat!("Size of: ", stringify!(ovrVector4f_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrVector4f_>(),
        4usize,
        concat!("Alignment of ", stringify!(ovrVector4f_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrVector4f_>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrVector4f_),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrVector4f_>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrVector4f_),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrVector4f_>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrVector4f_),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrVector4f_>())).w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrVector4f_),
            "::",
            stringify!(w)
        )
    );
}
pub type ovrVector4f = ovrVector4f_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrQuatf_ {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_ovrQuatf_() {
    assert_eq!(
        ::std::mem::size_of::<ovrQuatf_>(),
        16usize,
        concat!("Size of: ", stringify!(ovrQuatf_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrQuatf_>(),
        4usize,
        concat!("Alignment of ", stringify!(ovrQuatf_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrQuatf_>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrQuatf_),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrQuatf_>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrQuatf_),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrQuatf_>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrQuatf_),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrQuatf_>())).w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrQuatf_),
            "::",
            stringify!(w)
        )
    );
}
pub type ovrQuatf = ovrQuatf_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrMatrix4f_ {
    pub M: [[f32; 4usize]; 4usize],
}
#[test]
fn bindgen_test_layout_ovrMatrix4f_() {
    assert_eq!(
        ::std::mem::size_of::<ovrMatrix4f_>(),
        64usize,
        concat!("Size of: ", stringify!(ovrMatrix4f_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrMatrix4f_>(),
        4usize,
        concat!("Alignment of ", stringify!(ovrMatrix4f_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrMatrix4f_>())).M as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrMatrix4f_),
            "::",
            stringify!(M)
        )
    );
}
pub type ovrMatrix4f = ovrMatrix4f_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrPosef_ {
    pub Orientation: ovrQuatf,
    pub Position: ovrVector3f,
}
#[test]
fn bindgen_test_layout_ovrPosef_() {
    assert_eq!(
        ::std::mem::size_of::<ovrPosef_>(),
        28usize,
        concat!("Size of: ", stringify!(ovrPosef_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrPosef_>(),
        4usize,
        concat!("Alignment of ", stringify!(ovrPosef_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrPosef_>())).Orientation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrPosef_),
            "::",
            stringify!(Orientation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrPosef_>())).Position as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrPosef_),
            "::",
            stringify!(Position)
        )
    );
}
pub type ovrPosef = ovrPosef_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrRectf_ {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
}
#[test]
fn bindgen_test_layout_ovrRectf_() {
    assert_eq!(
        ::std::mem::size_of::<ovrRectf_>(),
        16usize,
        concat!("Size of: ", stringify!(ovrRectf_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrRectf_>(),
        4usize,
        concat!("Alignment of ", stringify!(ovrRectf_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrRectf_>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrRectf_),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrRectf_>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrRectf_),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrRectf_>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrRectf_),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrRectf_>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrRectf_),
            "::",
            stringify!(height)
        )
    );
}
pub type ovrRectf = ovrRectf_;
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrBooleanResult {
    VRAPI_FALSE = 0,
    VRAPI_TRUE = 1,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrEye {
    VRAPI_EYE_LEFT = 0,
    VRAPI_EYE_RIGHT = 1,
    VRAPI_EYE_COUNT = 2,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrStructureType {
    VRAPI_STRUCTURE_TYPE_INIT_PARMS = 1,
    VRAPI_STRUCTURE_TYPE_MODE_PARMS = 2,
    VRAPI_STRUCTURE_TYPE_FRAME_PARMS = 3,
}
pub const ovrDeviceType_VRAPI_DEVICE_TYPE_NOTE4: ovrDeviceType =
    ovrDeviceType::VRAPI_DEVICE_TYPE_GEARVR_START;
#[repr(i32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrDeviceType {
    VRAPI_DEVICE_TYPE_GEARVR_START = 0,
    VRAPI_DEVICE_TYPE_NOTE5 = 1,
    VRAPI_DEVICE_TYPE_S6 = 2,
    VRAPI_DEVICE_TYPE_S7 = 3,
    VRAPI_DEVICE_TYPE_NOTE7 = 4,
    VRAPI_DEVICE_TYPE_S8 = 5,
    VRAPI_DEVICE_TYPE_NOTE8 = 6,
    VRAPI_DEVICE_TYPE_NOTE7_FE = 7,
    VRAPI_DEVICE_GEARVR_END = 63,
    VRAPI_DEVICE_TYPE_UNKNOWN = -1,
}
#[repr(i32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrHeadsetType {
    VRAPI_HEADSET_TYPE_R320 = 0,
    VRAPI_HEADSET_TYPE_R321 = 1,
    VRAPI_HEADSET_TYPE_R322 = 2,
    VRAPI_HEADSET_TYPE_R323 = 3,
    VRAPI_HEADSET_TYPE_R324 = 4,
    VRAPI_HEADSET_TYPE_R325 = 5,
    VRAPI_HEADSET_TYPE_UNKNOWN = -1,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrDeviceRegion {
    VRAPI_DEVICE_REGION_UNSPECIFIED = 0,
    VRAPI_DEVICE_REGION_JAPAN = 1,
    VRAPI_DEVICE_REGION_CHINA = 2,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrVideoDecoderLimit {
    VRAPI_VIDEO_DECODER_LIMIT_4K_30FPS = 0,
    VRAPI_VIDEO_DECODER_LIMIT_4K_60FPS = 1,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrSystemProperty {
    VRAPI_SYS_PROP_DEVICE_TYPE = 0,
    VRAPI_SYS_PROP_MAX_FULLSPEED_FRAMEBUFFER_SAMPLES = 1,
    VRAPI_SYS_PROP_DISPLAY_PIXELS_WIDE = 2,
    VRAPI_SYS_PROP_DISPLAY_PIXELS_HIGH = 3,
    VRAPI_SYS_PROP_DISPLAY_REFRESH_RATE = 4,
    VRAPI_SYS_PROP_SUGGESTED_EYE_TEXTURE_WIDTH = 5,
    VRAPI_SYS_PROP_SUGGESTED_EYE_TEXTURE_HEIGHT = 6,
    VRAPI_SYS_PROP_SUGGESTED_EYE_FOV_DEGREES_X = 7,
    VRAPI_SYS_PROP_SUGGESTED_EYE_FOV_DEGREES_Y = 8,
    VRAPI_SYS_PROP_EXT_SDCARD_PATH = 9,
    VRAPI_SYS_PROP_DEVICE_REGION = 10,
    VRAPI_SYS_PROP_VIDEO_DECODER_LIMIT = 11,
    VRAPI_SYS_PROP_HEADSET_TYPE = 12,
    VRAPI_SYS_PROP_BACK_BUTTON_SHORTPRESS_TIME = 13,
    VRAPI_SYS_PROP_BACK_BUTTON_DOUBLETAP_TIME = 14,
    VRAPI_SYS_PROP_DOMINANT_HAND = 15,
    VRAPI_SYS_PROP_MULTIVIEW_AVAILABLE = 128,
    VRAPI_SYS_PROP_SRGB_LAYER_SOURCE_AVAILABLE = 129,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrHandedness {
    VRAPI_HAND_UNKNOWN = 0,
    VRAPI_HAND_LEFT = 1,
    VRAPI_HAND_RIGHT = 2,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrSystemStatus {
    VRAPI_SYS_STATUS_DOCKED = 0,
    VRAPI_SYS_STATUS_MOUNTED = 1,
    VRAPI_SYS_STATUS_THROTTLED = 2,
    VRAPI_SYS_STATUS_RENDER_LATENCY_MILLISECONDS = 5,
    VRAPI_SYS_STATUS_TIMEWARP_LATENCY_MILLISECONDS = 6,
    VRAPI_SYS_STATUS_SCANOUT_LATENCY_MILLISECONDS = 7,
    VRAPI_SYS_STATUS_APP_FRAMES_PER_SECOND = 8,
    VRAPI_SYS_STATUS_SCREEN_TEARS_PER_SECOND = 9,
    VRAPI_SYS_STATUS_EARLY_FRAMES_PER_SECOND = 10,
    VRAPI_SYS_STATUS_STALE_FRAMES_PER_SECOND = 11,
    VRAPI_SYS_STATUS_RECENTER_COUNT = 13,
    VRAPI_SYS_STATUS_SYSTEM_UX_ACTIVE = 14,
    VRAPI_SYS_STATUS_FRONT_BUFFER_PROTECTED = 128,
    VRAPI_SYS_STATUS_FRONT_BUFFER_565 = 129,
    VRAPI_SYS_STATUS_FRONT_BUFFER_SRGB = 130,
}
#[repr(i32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrInitializeStatus {
    VRAPI_INITIALIZE_SUCCESS = 0,
    VRAPI_INITIALIZE_UNKNOWN_ERROR = -1,
    VRAPI_INITIALIZE_PERMISSIONS_ERROR = -2,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrGraphicsAPI {
    VRAPI_GRAPHICS_API_OPENGL_ES_2 = 66048,
    VRAPI_GRAPHICS_API_OPENGL_ES_3 = 66304,
    VRAPI_GRAPHICS_API_OPENGL_COMPAT = 131328,
    VRAPI_GRAPHICS_API_OPENGL_CORE_3 = 131840,
    VRAPI_GRAPHICS_API_OPENGL_CORE_4 = 132096,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrInitParms {
    pub Type: ovrStructureType,
    pub ProductVersion: ::std::os::raw::c_int,
    pub MajorVersion: ::std::os::raw::c_int,
    pub MinorVersion: ::std::os::raw::c_int,
    pub PatchVersion: ::std::os::raw::c_int,
    pub GraphicsAPI: ovrGraphicsAPI,
    pub Java: ovrJava,
}
#[test]
fn bindgen_test_layout_ovrInitParms() {
    assert_eq!(
        ::std::mem::size_of::<ovrInitParms>(),
        48usize,
        concat!("Size of: ", stringify!(ovrInitParms))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrInitParms>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrInitParms))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrInitParms>())).Type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInitParms),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrInitParms>())).ProductVersion as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInitParms),
            "::",
            stringify!(ProductVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrInitParms>())).MajorVersion as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInitParms),
            "::",
            stringify!(MajorVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrInitParms>())).MinorVersion as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInitParms),
            "::",
            stringify!(MinorVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrInitParms>())).PatchVersion as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInitParms),
            "::",
            stringify!(PatchVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrInitParms>())).GraphicsAPI as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInitParms),
            "::",
            stringify!(GraphicsAPI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrInitParms>())).Java as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInitParms),
            "::",
            stringify!(Java)
        )
    );
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrModeFlags {
    VRAPI_MODE_FLAG_ALLOW_POWER_SAVE = 255,
    VRAPI_MODE_FLAG_RESET_WINDOW_FULLSCREEN = 65280,
    VRAPI_MODE_FLAG_NATIVE_WINDOW = 65536,
    VRAPI_MODE_FLAG_FRONT_BUFFER_PROTECTED = 131072,
    VRAPI_MODE_FLAG_FRONT_BUFFER_565 = 262144,
    VRAPI_MODE_FLAG_FRONT_BUFFER_SRGB = 524288,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrModeParms {
    pub Type: ovrStructureType,
    pub Flags: ::std::os::raw::c_uint,
    pub Java: ovrJava,
    pub Display: ::std::os::raw::c_ulonglong,
    pub WindowSurface: ::std::os::raw::c_ulonglong,
    pub ShareContext: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_ovrModeParms() {
    assert_eq!(
        ::std::mem::size_of::<ovrModeParms>(),
        56usize,
        concat!("Size of: ", stringify!(ovrModeParms))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrModeParms>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrModeParms))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrModeParms>())).Type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrModeParms),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrModeParms>())).Flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrModeParms),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrModeParms>())).Java as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrModeParms),
            "::",
            stringify!(Java)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrModeParms>())).Display as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrModeParms),
            "::",
            stringify!(Display)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrModeParms>())).WindowSurface as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrModeParms),
            "::",
            stringify!(WindowSurface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrModeParms>())).ShareContext as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrModeParms),
            "::",
            stringify!(ShareContext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrMobile {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrRigidBodyPosef_ {
    pub Pose: ovrPosef,
    pub AngularVelocity: ovrVector3f,
    pub LinearVelocity: ovrVector3f,
    pub AngularAcceleration: ovrVector3f,
    pub LinearAcceleration: ovrVector3f,
    pub dead10: [::std::os::raw::c_uchar; 4usize],
    pub TimeInSeconds: f64,
    pub PredictionInSeconds: f64,
}
#[test]
fn bindgen_test_layout_ovrRigidBodyPosef_() {
    assert_eq!(
        ::std::mem::size_of::<ovrRigidBodyPosef_>(),
        96usize,
        concat!("Size of: ", stringify!(ovrRigidBodyPosef_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrRigidBodyPosef_>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrRigidBodyPosef_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).Pose as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrRigidBodyPosef_),
            "::",
            stringify!(Pose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).AngularVelocity as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrRigidBodyPosef_),
            "::",
            stringify!(AngularVelocity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).LinearVelocity as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrRigidBodyPosef_),
            "::",
            stringify!(LinearVelocity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).AngularAcceleration as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrRigidBodyPosef_),
            "::",
            stringify!(AngularAcceleration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).LinearAcceleration as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrRigidBodyPosef_),
            "::",
            stringify!(LinearAcceleration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).dead10 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrRigidBodyPosef_),
            "::",
            stringify!(dead10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).TimeInSeconds as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrRigidBodyPosef_),
            "::",
            stringify!(TimeInSeconds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrRigidBodyPosef_>())).PredictionInSeconds as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrRigidBodyPosef_),
            "::",
            stringify!(PredictionInSeconds)
        )
    );
}
pub type ovrRigidBodyPosef = ovrRigidBodyPosef_;
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrTrackingStatus {
    VRAPI_TRACKING_STATUS_ORIENTATION_TRACKED = 1,
    VRAPI_TRACKING_STATUS_POSITION_TRACKED = 2,
    VRAPI_TRACKING_STATUS_HMD_CONNECTED = 128,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrTracking2_ {
    pub Status: ::std::os::raw::c_uint,
    pub dead12: [::std::os::raw::c_uchar; 4usize],
    pub HeadPose: ovrRigidBodyPosef,
    pub Eye: [ovrTracking2___bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrTracking2___bindgen_ty_1 {
    pub ProjectionMatrix: ovrMatrix4f,
    pub ViewMatrix: ovrMatrix4f,
}
#[test]
fn bindgen_test_layout_ovrTracking2___bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ovrTracking2___bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(ovrTracking2___bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrTracking2___bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ovrTracking2___bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrTracking2___bindgen_ty_1>())).ProjectionMatrix as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrTracking2___bindgen_ty_1),
            "::",
            stringify!(ProjectionMatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrTracking2___bindgen_ty_1>())).ViewMatrix as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrTracking2___bindgen_ty_1),
            "::",
            stringify!(ViewMatrix)
        )
    );
}
#[test]
fn bindgen_test_layout_ovrTracking2_() {
    assert_eq!(
        ::std::mem::size_of::<ovrTracking2_>(),
        360usize,
        concat!("Size of: ", stringify!(ovrTracking2_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrTracking2_>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrTracking2_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrTracking2_>())).Status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrTracking2_),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrTracking2_>())).dead12 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrTracking2_),
            "::",
            stringify!(dead12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrTracking2_>())).HeadPose as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrTracking2_),
            "::",
            stringify!(HeadPose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrTracking2_>())).Eye as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrTracking2_),
            "::",
            stringify!(Eye)
        )
    );
}
pub type ovrTracking2 = ovrTracking2_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrTracking_ {
    pub Status: ::std::os::raw::c_uint,
    pub dead14: [::std::os::raw::c_uchar; 4usize],
    pub HeadPose: ovrRigidBodyPosef,
}
#[test]
fn bindgen_test_layout_ovrTracking_() {
    assert_eq!(
        ::std::mem::size_of::<ovrTracking_>(),
        104usize,
        concat!("Size of: ", stringify!(ovrTracking_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrTracking_>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrTracking_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrTracking_>())).Status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrTracking_),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrTracking_>())).dead14 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrTracking_),
            "::",
            stringify!(dead14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrTracking_>())).HeadPose as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrTracking_),
            "::",
            stringify!(HeadPose)
        )
    );
}
pub type ovrTracking = ovrTracking_;
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrTrackingTransform {
    VRAPI_TRACKING_TRANSFORM_IDENTITY = 0,
    VRAPI_TRACKING_TRANSFORM_CURRENT = 1,
    VRAPI_TRACKING_TRANSFORM_SYSTEM_CENTER_EYE_LEVEL = 2,
    VRAPI_TRACKING_TRANSFORM_SYSTEM_CENTER_FLOOR_LEVEL = 3,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrTextureType {
    VRAPI_TEXTURE_TYPE_2D = 0,
    VRAPI_TEXTURE_TYPE_2D_EXTERNAL = 1,
    VRAPI_TEXTURE_TYPE_2D_ARRAY = 2,
    VRAPI_TEXTURE_TYPE_CUBE = 3,
    VRAPI_TEXTURE_TYPE_MAX = 4,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrTextureFormat {
    VRAPI_TEXTURE_FORMAT_NONE = 0,
    VRAPI_TEXTURE_FORMAT_565 = 1,
    VRAPI_TEXTURE_FORMAT_5551 = 2,
    VRAPI_TEXTURE_FORMAT_4444 = 3,
    VRAPI_TEXTURE_FORMAT_8888 = 4,
    VRAPI_TEXTURE_FORMAT_8888_sRGB = 5,
    VRAPI_TEXTURE_FORMAT_RGBA16F = 6,
    VRAPI_TEXTURE_FORMAT_DEPTH_16 = 7,
    VRAPI_TEXTURE_FORMAT_DEPTH_24 = 8,
    VRAPI_TEXTURE_FORMAT_DEPTH_24_STENCIL_8 = 9,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrDefaultTextureSwapChain {
    VRAPI_DEFAULT_TEXTURE_SWAPCHAIN = 1,
    VRAPI_DEFAULT_TEXTURE_SWAPCHAIN_LOADING_ICON = 2,
}
#[repr(i32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrTextureSwapChainSettings {
    VRAPI_TEXTURE_SWAPCHAIN_FULL_MIP_CHAIN = -1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrTextureSwapChain {
    _unused: [u8; 0],
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrFrameFlags {
    VRAPI_FRAME_FLAG_INHIBIT_SRGB_FRAMEBUFFER = 1,
    VRAPI_FRAME_FLAG_FLUSH = 2,
    VRAPI_FRAME_FLAG_FINAL = 4,
    VRAPI_FRAME_FLAG_INHIBIT_VOLUME_LAYER = 64,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrFrameLayerFlags {
    VRAPI_FRAME_LAYER_FLAG_WRITE_ALPHA = 1,
    VRAPI_FRAME_LAYER_FLAG_CHROMATIC_ABERRATION_CORRECTION = 2,
    VRAPI_FRAME_LAYER_FLAG_FIXED_TO_VIEW = 4,
    VRAPI_FRAME_LAYER_FLAG_SPIN = 8,
    VRAPI_FRAME_LAYER_FLAG_CLIP_TO_TEXTURE_RECT = 16,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrFrameLayerEye {
    VRAPI_FRAME_LAYER_EYE_LEFT = 0,
    VRAPI_FRAME_LAYER_EYE_RIGHT = 1,
    VRAPI_FRAME_LAYER_EYE_MAX = 2,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrFrameLayerBlend {
    VRAPI_FRAME_LAYER_BLEND_ZERO = 0,
    VRAPI_FRAME_LAYER_BLEND_ONE = 1,
    VRAPI_FRAME_LAYER_BLEND_SRC_ALPHA = 2,
    VRAPI_FRAME_LAYER_BLEND_DST_ALPHA = 3,
    VRAPI_FRAME_LAYER_BLEND_ONE_MINUS_DST_ALPHA = 4,
    VRAPI_FRAME_LAYER_BLEND_ONE_MINUS_SRC_ALPHA = 5,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrFrameLayerType {
    VRAPI_FRAME_LAYER_TYPE_MAX = 4,
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrExtraLatencyMode {
    VRAPI_EXTRA_LATENCY_MODE_OFF = 0,
    VRAPI_EXTRA_LATENCY_MODE_ON = 1,
    VRAPI_EXTRA_LATENCY_MODE_DYNAMIC = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrFrameLayerTexture {
    pub ColorTextureSwapChain: *mut ovrTextureSwapChain,
    pub DepthTextureSwapChain: *mut ovrTextureSwapChain,
    pub TextureSwapChainIndex: ::std::os::raw::c_int,
    pub TexCoordsFromTanAngles: ovrMatrix4f,
    pub TextureRect: ovrRectf,
    pub dead16: [::std::os::raw::c_uchar; 4usize],
    pub HeadPose: ovrRigidBodyPosef,
    pub CompletionFence: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_ovrFrameLayerTexture() {
    assert_eq!(
        ::std::mem::size_of::<ovrFrameLayerTexture>(),
        208usize,
        concat!("Size of: ", stringify!(ovrFrameLayerTexture))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrFrameLayerTexture>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrFrameLayerTexture))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrFrameLayerTexture>())).ColorTextureSwapChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayerTexture),
            "::",
            stringify!(ColorTextureSwapChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrFrameLayerTexture>())).DepthTextureSwapChain as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayerTexture),
            "::",
            stringify!(DepthTextureSwapChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrFrameLayerTexture>())).TextureSwapChainIndex as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayerTexture),
            "::",
            stringify!(TextureSwapChainIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrFrameLayerTexture>())).TexCoordsFromTanAngles as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayerTexture),
            "::",
            stringify!(TexCoordsFromTanAngles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrFrameLayerTexture>())).TextureRect as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayerTexture),
            "::",
            stringify!(TextureRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameLayerTexture>())).dead16 as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayerTexture),
            "::",
            stringify!(dead16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameLayerTexture>())).HeadPose as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayerTexture),
            "::",
            stringify!(HeadPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrFrameLayerTexture>())).CompletionFence as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayerTexture),
            "::",
            stringify!(CompletionFence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrFrameLayer {
    pub Textures: [ovrFrameLayerTexture; 2usize],
    pub SpinSpeed: f32,
    pub SpinScale: f32,
    pub ColorScale: f32,
    pub dead18: [::std::os::raw::c_uchar; 4usize],
    pub SrcBlend: ovrFrameLayerBlend,
    pub DstBlend: ovrFrameLayerBlend,
    pub Flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ovrFrameLayer() {
    assert_eq!(
        ::std::mem::size_of::<ovrFrameLayer>(),
        448usize,
        concat!("Size of: ", stringify!(ovrFrameLayer))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrFrameLayer>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrFrameLayer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).Textures as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayer),
            "::",
            stringify!(Textures)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).SpinSpeed as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayer),
            "::",
            stringify!(SpinSpeed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).SpinScale as *const _ as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayer),
            "::",
            stringify!(SpinScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).ColorScale as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayer),
            "::",
            stringify!(ColorScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).dead18 as *const _ as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayer),
            "::",
            stringify!(dead18)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).SrcBlend as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayer),
            "::",
            stringify!(SrcBlend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).DstBlend as *const _ as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayer),
            "::",
            stringify!(DstBlend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameLayer>())).Flags as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameLayer),
            "::",
            stringify!(Flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrPerformanceParms {
    pub CpuLevel: ::std::os::raw::c_int,
    pub GpuLevel: ::std::os::raw::c_int,
    pub MainThreadTid: ::std::os::raw::c_int,
    pub RenderThreadTid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ovrPerformanceParms() {
    assert_eq!(
        ::std::mem::size_of::<ovrPerformanceParms>(),
        16usize,
        concat!("Size of: ", stringify!(ovrPerformanceParms))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrPerformanceParms>(),
        4usize,
        concat!("Alignment of ", stringify!(ovrPerformanceParms))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrPerformanceParms>())).CpuLevel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrPerformanceParms),
            "::",
            stringify!(CpuLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrPerformanceParms>())).GpuLevel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrPerformanceParms),
            "::",
            stringify!(GpuLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrPerformanceParms>())).MainThreadTid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrPerformanceParms),
            "::",
            stringify!(MainThreadTid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrPerformanceParms>())).RenderThreadTid as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrPerformanceParms),
            "::",
            stringify!(RenderThreadTid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrFrameParms {
    pub Type: ovrStructureType,
    pub dead21: [::std::os::raw::c_uchar; 4usize],
    pub Layers: [ovrFrameLayer; 4usize],
    pub LayerCount: ::std::os::raw::c_int,
    pub Flags: ::std::os::raw::c_int,
    pub FrameIndex: ::std::os::raw::c_longlong,
    pub SwapInterval: ::std::os::raw::c_int,
    pub ExtraLatencyMode: ovrExtraLatencyMode,
    pub ExternalVelocity: ovrMatrix4f,
    pub SurfaceTextureObject: jobject,
    pub PerformanceParms: ovrPerformanceParms,
    pub Java: ovrJava,
}
#[test]
fn bindgen_test_layout_ovrFrameParms() {
    assert_eq!(
        ::std::mem::size_of::<ovrFrameParms>(),
        1936usize,
        concat!("Size of: ", stringify!(ovrFrameParms))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrFrameParms>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrFrameParms))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).Type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameParms),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).dead21 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameParms),
            "::",
            stringify!(dead21)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).Layers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameParms),
            "::",
            stringify!(Layers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).LayerCount as *const _ as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameParms),
            "::",
            stringify!(LayerCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).Flags as *const _ as usize },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameParms),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).FrameIndex as *const _ as usize },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameParms),
            "::",
            stringify!(FrameIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).SwapInterval as *const _ as usize },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameParms),
            "::",
            stringify!(SwapInterval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).ExtraLatencyMode as *const _ as usize },
        1820usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameParms),
            "::",
            stringify!(ExtraLatencyMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).ExternalVelocity as *const _ as usize },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameParms),
            "::",
            stringify!(ExternalVelocity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrFrameParms>())).SurfaceTextureObject as *const _ as usize
        },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameParms),
            "::",
            stringify!(SurfaceTextureObject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).PerformanceParms as *const _ as usize },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameParms),
            "::",
            stringify!(PerformanceParms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrFrameParms>())).Java as *const _ as usize },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrFrameParms),
            "::",
            stringify!(Java)
        )
    );
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrLayerType2_ {
    VRAPI_LAYER_TYPE_PROJECTION2 = 1,
    VRAPI_LAYER_TYPE_CYLINDER2 = 3,
    VRAPI_LAYER_TYPE_CUBE2 = 4,
    VRAPI_LAYER_TYPE_EQUIRECT2 = 5,
    VRAPI_LAYER_TYPE_LOADING_ICON2 = 6,
}
pub use self::ovrLayerType2_ as ovrLayerType2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrLayerHeader2_ {
    pub Type: ovrLayerType2,
    pub Flags: u32,
    pub ColorScale: ovrVector4f,
    pub SrcBlend: ovrFrameLayerBlend,
    pub DstBlend: ovrFrameLayerBlend,
    pub SurfaceTextureObject: jobject,
}
#[test]
fn bindgen_test_layout_ovrLayerHeader2_() {
    assert_eq!(
        ::std::mem::size_of::<ovrLayerHeader2_>(),
        40usize,
        concat!("Size of: ", stringify!(ovrLayerHeader2_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrLayerHeader2_>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrLayerHeader2_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerHeader2_>())).Type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerHeader2_),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerHeader2_>())).Flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerHeader2_),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerHeader2_>())).ColorScale as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerHeader2_),
            "::",
            stringify!(ColorScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerHeader2_>())).SrcBlend as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerHeader2_),
            "::",
            stringify!(SrcBlend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerHeader2_>())).DstBlend as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerHeader2_),
            "::",
            stringify!(DstBlend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerHeader2_>())).SurfaceTextureObject as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerHeader2_),
            "::",
            stringify!(SurfaceTextureObject)
        )
    );
}
pub type ovrLayerHeader2 = ovrLayerHeader2_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrLayerProjection2 {
    pub Header: ovrLayerHeader2,
    pub HeadPose: ovrRigidBodyPosef,
    pub Textures: [ovrLayerProjection2__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrLayerProjection2__bindgen_ty_1 {
    pub ColorSwapChain: *mut ovrTextureSwapChain,
    pub SwapChainIndex: ::std::os::raw::c_int,
    pub TexCoordsFromTanAngles: ovrMatrix4f,
    pub TextureRect: ovrRectf,
}
#[test]
fn bindgen_test_layout_ovrLayerProjection2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ovrLayerProjection2__bindgen_ty_1>(),
        96usize,
        concat!("Size of: ", stringify!(ovrLayerProjection2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrLayerProjection2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ovrLayerProjection2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerProjection2__bindgen_ty_1>())).ColorSwapChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerProjection2__bindgen_ty_1),
            "::",
            stringify!(ColorSwapChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerProjection2__bindgen_ty_1>())).SwapChainIndex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerProjection2__bindgen_ty_1),
            "::",
            stringify!(SwapChainIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerProjection2__bindgen_ty_1>())).TexCoordsFromTanAngles
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerProjection2__bindgen_ty_1),
            "::",
            stringify!(TexCoordsFromTanAngles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerProjection2__bindgen_ty_1>())).TextureRect as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerProjection2__bindgen_ty_1),
            "::",
            stringify!(TextureRect)
        )
    );
}
#[test]
fn bindgen_test_layout_ovrLayerProjection2() {
    assert_eq!(
        ::std::mem::size_of::<ovrLayerProjection2>(),
        328usize,
        concat!("Size of: ", stringify!(ovrLayerProjection2))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrLayerProjection2>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrLayerProjection2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerProjection2>())).Header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerProjection2),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerProjection2>())).HeadPose as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerProjection2),
            "::",
            stringify!(HeadPose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerProjection2>())).Textures as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerProjection2),
            "::",
            stringify!(Textures)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrLayerCylinder2 {
    pub Header: ovrLayerHeader2,
    pub HeadPose: ovrRigidBodyPosef,
    pub Textures: [ovrLayerCylinder2__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrLayerCylinder2__bindgen_ty_1 {
    pub ColorSwapChain: *mut ovrTextureSwapChain,
    pub SwapChainIndex: ::std::os::raw::c_int,
    pub TexCoordsFromTanAngles: ovrMatrix4f,
    pub TextureRect: ovrRectf,
    pub TextureMatrix: ovrMatrix4f,
}
#[test]
fn bindgen_test_layout_ovrLayerCylinder2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ovrLayerCylinder2__bindgen_ty_1>(),
        160usize,
        concat!("Size of: ", stringify!(ovrLayerCylinder2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrLayerCylinder2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrLayerCylinder2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerCylinder2__bindgen_ty_1>())).ColorSwapChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCylinder2__bindgen_ty_1),
            "::",
            stringify!(ColorSwapChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerCylinder2__bindgen_ty_1>())).SwapChainIndex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCylinder2__bindgen_ty_1),
            "::",
            stringify!(SwapChainIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerCylinder2__bindgen_ty_1>())).TexCoordsFromTanAngles
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCylinder2__bindgen_ty_1),
            "::",
            stringify!(TexCoordsFromTanAngles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerCylinder2__bindgen_ty_1>())).TextureRect as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCylinder2__bindgen_ty_1),
            "::",
            stringify!(TextureRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerCylinder2__bindgen_ty_1>())).TextureMatrix as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCylinder2__bindgen_ty_1),
            "::",
            stringify!(TextureMatrix)
        )
    );
}
#[test]
fn bindgen_test_layout_ovrLayerCylinder2() {
    assert_eq!(
        ::std::mem::size_of::<ovrLayerCylinder2>(),
        456usize,
        concat!("Size of: ", stringify!(ovrLayerCylinder2))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrLayerCylinder2>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrLayerCylinder2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerCylinder2>())).Header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCylinder2),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerCylinder2>())).HeadPose as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCylinder2),
            "::",
            stringify!(HeadPose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerCylinder2>())).Textures as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCylinder2),
            "::",
            stringify!(Textures)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrLayerCube2 {
    pub Header: ovrLayerHeader2,
    pub HeadPose: ovrRigidBodyPosef,
    pub TexCoordsFromTanAngles: ovrMatrix4f,
    pub Offset: ovrVector3f,
    pub Textures: [ovrLayerCube2__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrLayerCube2__bindgen_ty_1 {
    pub ColorSwapChain: *mut ovrTextureSwapChain,
    pub SwapChainIndex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ovrLayerCube2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ovrLayerCube2__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(ovrLayerCube2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrLayerCube2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrLayerCube2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerCube2__bindgen_ty_1>())).ColorSwapChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCube2__bindgen_ty_1),
            "::",
            stringify!(ColorSwapChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerCube2__bindgen_ty_1>())).SwapChainIndex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCube2__bindgen_ty_1),
            "::",
            stringify!(SwapChainIndex)
        )
    );
}
#[test]
fn bindgen_test_layout_ovrLayerCube2() {
    assert_eq!(
        ::std::mem::size_of::<ovrLayerCube2>(),
        248usize,
        concat!("Size of: ", stringify!(ovrLayerCube2))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrLayerCube2>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrLayerCube2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerCube2>())).Header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCube2),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerCube2>())).HeadPose as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCube2),
            "::",
            stringify!(HeadPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerCube2>())).TexCoordsFromTanAngles as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCube2),
            "::",
            stringify!(TexCoordsFromTanAngles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerCube2>())).Offset as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCube2),
            "::",
            stringify!(Offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerCube2>())).Textures as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerCube2),
            "::",
            stringify!(Textures)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrLayerEquirect2 {
    pub Header: ovrLayerHeader2,
    pub HeadPose: ovrRigidBodyPosef,
    pub TexCoordsFromTanAngles: ovrMatrix4f,
    pub Textures: [ovrLayerEquirect2__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrLayerEquirect2__bindgen_ty_1 {
    pub ColorSwapChain: *mut ovrTextureSwapChain,
    pub SwapChainIndex: ::std::os::raw::c_int,
    pub TextureRect: ovrRectf,
    pub TextureMatrix: ovrMatrix4f,
}
#[test]
fn bindgen_test_layout_ovrLayerEquirect2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ovrLayerEquirect2__bindgen_ty_1>(),
        96usize,
        concat!("Size of: ", stringify!(ovrLayerEquirect2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrLayerEquirect2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrLayerEquirect2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerEquirect2__bindgen_ty_1>())).ColorSwapChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerEquirect2__bindgen_ty_1),
            "::",
            stringify!(ColorSwapChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerEquirect2__bindgen_ty_1>())).SwapChainIndex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerEquirect2__bindgen_ty_1),
            "::",
            stringify!(SwapChainIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerEquirect2__bindgen_ty_1>())).TextureRect as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerEquirect2__bindgen_ty_1),
            "::",
            stringify!(TextureRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerEquirect2__bindgen_ty_1>())).TextureMatrix as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerEquirect2__bindgen_ty_1),
            "::",
            stringify!(TextureMatrix)
        )
    );
}
#[test]
fn bindgen_test_layout_ovrLayerEquirect2() {
    assert_eq!(
        ::std::mem::size_of::<ovrLayerEquirect2>(),
        392usize,
        concat!("Size of: ", stringify!(ovrLayerEquirect2))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrLayerEquirect2>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrLayerEquirect2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerEquirect2>())).Header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerEquirect2),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerEquirect2>())).HeadPose as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerEquirect2),
            "::",
            stringify!(HeadPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerEquirect2>())).TexCoordsFromTanAngles as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerEquirect2),
            "::",
            stringify!(TexCoordsFromTanAngles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerEquirect2>())).Textures as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerEquirect2),
            "::",
            stringify!(Textures)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrLayerLoadingIcon2 {
    pub Header: ovrLayerHeader2,
    pub SpinSpeed: f32,
    pub SpinScale: f32,
    pub ColorSwapChain: *mut ovrTextureSwapChain,
    pub SwapChainIndex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ovrLayerLoadingIcon2() {
    assert_eq!(
        ::std::mem::size_of::<ovrLayerLoadingIcon2>(),
        64usize,
        concat!("Size of: ", stringify!(ovrLayerLoadingIcon2))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrLayerLoadingIcon2>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrLayerLoadingIcon2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerLoadingIcon2>())).Header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerLoadingIcon2),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerLoadingIcon2>())).SpinSpeed as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerLoadingIcon2),
            "::",
            stringify!(SpinSpeed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayerLoadingIcon2>())).SpinScale as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerLoadingIcon2),
            "::",
            stringify!(SpinScale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerLoadingIcon2>())).ColorSwapChain as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerLoadingIcon2),
            "::",
            stringify!(ColorSwapChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrLayerLoadingIcon2>())).SwapChainIndex as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayerLoadingIcon2),
            "::",
            stringify!(SwapChainIndex)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ovrLayer_Union2 {
    pub Header: ovrLayerHeader2,
    pub Projection: ovrLayerProjection2,
    pub Cylinder: ovrLayerCylinder2,
    pub Cube: ovrLayerCube2,
    pub Equirect: ovrLayerEquirect2,
    pub LoadingIcon: ovrLayerLoadingIcon2,
    _bindgen_union_align: [u64; 57usize],
}
#[test]
fn bindgen_test_layout_ovrLayer_Union2() {
    assert_eq!(
        ::std::mem::size_of::<ovrLayer_Union2>(),
        456usize,
        concat!("Size of: ", stringify!(ovrLayer_Union2))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrLayer_Union2>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrLayer_Union2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayer_Union2>())).Header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayer_Union2),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayer_Union2>())).Projection as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayer_Union2),
            "::",
            stringify!(Projection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayer_Union2>())).Cylinder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayer_Union2),
            "::",
            stringify!(Cylinder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayer_Union2>())).Cube as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayer_Union2),
            "::",
            stringify!(Cube)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayer_Union2>())).Equirect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayer_Union2),
            "::",
            stringify!(Equirect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrLayer_Union2>())).LoadingIcon as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrLayer_Union2),
            "::",
            stringify!(LoadingIcon)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrSubmitFrameDescription2_ {
    pub Flags: u32,
    pub SwapInterval: u32,
    pub FrameIndex: u64,
    pub DisplayTime: f64,
    pub CompletionFence: ::std::os::raw::c_ulonglong,
    pub LayerCount: u32,
    pub Layers: *const *const ovrLayerHeader2,
}
#[test]
fn bindgen_test_layout_ovrSubmitFrameDescription2_() {
    assert_eq!(
        ::std::mem::size_of::<ovrSubmitFrameDescription2_>(),
        48usize,
        concat!("Size of: ", stringify!(ovrSubmitFrameDescription2_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrSubmitFrameDescription2_>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrSubmitFrameDescription2_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).Flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrSubmitFrameDescription2_),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).SwapInterval as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrSubmitFrameDescription2_),
            "::",
            stringify!(SwapInterval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).FrameIndex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrSubmitFrameDescription2_),
            "::",
            stringify!(FrameIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).DisplayTime as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrSubmitFrameDescription2_),
            "::",
            stringify!(DisplayTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).CompletionFence as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrSubmitFrameDescription2_),
            "::",
            stringify!(CompletionFence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).LayerCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrSubmitFrameDescription2_),
            "::",
            stringify!(LayerCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrSubmitFrameDescription2_>())).Layers as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrSubmitFrameDescription2_),
            "::",
            stringify!(Layers)
        )
    );
}
pub type ovrSubmitFrameDescription2 = ovrSubmitFrameDescription2_;
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrPerfThreadType {
    VRAPI_PERF_THREAD_TYPE_MAIN = 0,
    VRAPI_PERF_THREAD_TYPE_RENDERER = 1,
}
extern "C" {
    pub fn vrapi_GetVersionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn vrapi_GetTimeInSeconds() -> f64;
}
extern "C" {
    pub fn vrapi_Initialize(initParms: *const ovrInitParms) -> ovrInitializeStatus;
}
extern "C" {
    pub fn vrapi_Shutdown();
}
extern "C" {
    pub fn vrapi_GetSystemPropertyInt(
        java: *const ovrJava,
        propType: ovrSystemProperty,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vrapi_GetSystemPropertyFloat(java: *const ovrJava, propType: ovrSystemProperty) -> f32;
}
extern "C" {
    pub fn vrapi_GetSystemPropertyString(
        java: *const ovrJava,
        propType: ovrSystemProperty,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn vrapi_GetSystemStatusInt(
        java: *const ovrJava,
        statusType: ovrSystemStatus,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vrapi_GetSystemStatusFloat(java: *const ovrJava, statusType: ovrSystemStatus) -> f32;
}
extern "C" {
    pub fn vrapi_EnterVrMode(parms: *const ovrModeParms) -> *mut ovrMobile;
}
extern "C" {
    pub fn vrapi_LeaveVrMode(ovr: *mut ovrMobile);
}
extern "C" {
    pub fn vrapi_GetPredictedDisplayTime(
        ovr: *mut ovrMobile,
        frameIndex: ::std::os::raw::c_longlong,
    ) -> f64;
}
extern "C" {
    pub fn vrapi_GetPredictedTracking2(ovr: *mut ovrMobile, absTimeInSeconds: f64) -> ovrTracking2;
}
extern "C" {
    pub fn vrapi_GetPredictedTracking(ovr: *mut ovrMobile, absTimeInSeconds: f64) -> ovrTracking;
}
extern "C" {
    pub fn vrapi_RecenterPose(ovr: *mut ovrMobile);
}
extern "C" {
    pub fn vrapi_GetTrackingTransform(
        ovr: *mut ovrMobile,
        whichTransform: ovrTrackingTransform,
    ) -> ovrPosef;
}
extern "C" {
    pub fn vrapi_SetTrackingTransform(ovr: *mut ovrMobile, pose: ovrPosef);
}
extern "C" {
    pub fn vrapi_CreateTextureSwapChain2(
        type_: ovrTextureType,
        format: ovrTextureFormat,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        levels: ::std::os::raw::c_int,
        bufferCount: ::std::os::raw::c_int,
    ) -> *mut ovrTextureSwapChain;
}
extern "C" {
    pub fn vrapi_CreateTextureSwapChain(
        type_: ovrTextureType,
        format: ovrTextureFormat,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        levels: ::std::os::raw::c_int,
        buffered: bool,
    ) -> *mut ovrTextureSwapChain;
}
extern "C" {
    pub fn vrapi_DestroyTextureSwapChain(chain: *mut ovrTextureSwapChain);
}
extern "C" {
    pub fn vrapi_GetTextureSwapChainLength(
        chain: *mut ovrTextureSwapChain,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vrapi_GetTextureSwapChainHandle(
        chain: *mut ovrTextureSwapChain,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn vrapi_SetTextureSwapChainHandle(
        chain: *mut ovrTextureSwapChain,
        index: ::std::os::raw::c_int,
        handle: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn vrapi_SubmitFrame(ovr: *mut ovrMobile, parms: *const ovrFrameParms);
}
extern "C" {
    pub fn vrapi_SubmitFrame2(
        ovr: *mut ovrMobile,
        frameDescription: *const ovrSubmitFrameDescription2,
    ) -> ovrResult;
}
extern "C" {
    pub fn vrapi_SetClockLevels(ovr: *mut ovrMobile, cpuLevel: i32, gpuLevel: i32) -> ovrResult;
}
extern "C" {
    pub fn vrapi_SetPerfThread(
        ovr: *mut ovrMobile,
        type_: ovrPerfThreadType,
        threadId: u32,
    ) -> ovrResult;
}
extern "C" {
    pub fn vrapi_SetExtraLatencyMode(ovr: *mut ovrMobile, mode: ovrExtraLatencyMode) -> ovrResult;
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrButton_ {
    ovrButton_A = 1,
    ovrButton_B = 2,
    ovrButton_RThumb = 4,
    ovrButton_RShoulder = 8,
    ovrButton_X = 256,
    ovrButton_Y = 512,
    ovrButton_LThumb = 1024,
    ovrButton_LShoulder = 2048,
    ovrButton_Up = 65536,
    ovrButton_Down = 131072,
    ovrButton_Left = 262144,
    ovrButton_Right = 524288,
    ovrButton_Enter = 1048576,
    ovrButton_Back = 2097152,
    ovrButton_EnumSize = 2147483647,
}
pub use self::ovrButton_ as ovrButton;
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrControllerType_ {
    ovrControllerType_None = 0,
    ovrControllerType_Reserved0 = 1,
    ovrControllerType_Reserved1 = 2,
    ovrControllerType_TrackedRemote = 4,
    ovrControllerType_Headset = 8,
    ovrControllerType_Reserved2 = 16,
    ovrControllerType_EnumSize = 2147483647,
}
pub use self::ovrControllerType_ as ovrControllerType;
pub type ovrDeviceID = u32;
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrDeviceIdType_ {
    ovrDeviceIdType_Invalid = 2147483647,
}
pub use self::ovrDeviceIdType_ as ovrDeviceIdType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrInputCapabilityHeader_ {
    pub Type: ovrControllerType,
    pub DeviceID: ovrDeviceID,
}
#[test]
fn bindgen_test_layout_ovrInputCapabilityHeader_() {
    assert_eq!(
        ::std::mem::size_of::<ovrInputCapabilityHeader_>(),
        8usize,
        concat!("Size of: ", stringify!(ovrInputCapabilityHeader_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrInputCapabilityHeader_>(),
        4usize,
        concat!("Alignment of ", stringify!(ovrInputCapabilityHeader_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrInputCapabilityHeader_>())).Type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputCapabilityHeader_),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputCapabilityHeader_>())).DeviceID as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputCapabilityHeader_),
            "::",
            stringify!(DeviceID)
        )
    );
}
pub type ovrInputCapabilityHeader = ovrInputCapabilityHeader_;
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrControllerCapabilities_ {
    ovrControllerCaps_HasOrientationTracking = 1,
    ovrControllerCaps_HasPositionTracking = 2,
    ovrControllerCaps_LeftHand = 4,
    ovrControllerCaps_RightHand = 8,
    ovrControllerCaps_EnumSize = 2147483647,
}
pub use self::ovrControllerCapabilities_ as ovrControllerCapabilties;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrInputTrackedRemoteCapabilities_ {
    pub Header: ovrInputCapabilityHeader,
    pub ControllerCapabilities: u32,
    pub ButtonCapabilities: u32,
    pub TrackpadMaxX: u16,
    pub TrackpadMaxY: u16,
    pub TrackpadSizeX: f32,
    pub TrackpadSizeY: f32,
}
#[test]
fn bindgen_test_layout_ovrInputTrackedRemoteCapabilities_() {
    assert_eq!(
        ::std::mem::size_of::<ovrInputTrackedRemoteCapabilities_>(),
        28usize,
        concat!("Size of: ", stringify!(ovrInputTrackedRemoteCapabilities_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrInputTrackedRemoteCapabilities_>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ovrInputTrackedRemoteCapabilities_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>())).Header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputTrackedRemoteCapabilities_),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>())).ControllerCapabilities
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputTrackedRemoteCapabilities_),
            "::",
            stringify!(ControllerCapabilities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>())).ButtonCapabilities
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputTrackedRemoteCapabilities_),
            "::",
            stringify!(ButtonCapabilities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>())).TrackpadMaxX as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputTrackedRemoteCapabilities_),
            "::",
            stringify!(TrackpadMaxX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>())).TrackpadMaxY as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputTrackedRemoteCapabilities_),
            "::",
            stringify!(TrackpadMaxY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>())).TrackpadSizeX as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputTrackedRemoteCapabilities_),
            "::",
            stringify!(TrackpadSizeX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputTrackedRemoteCapabilities_>())).TrackpadSizeY as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputTrackedRemoteCapabilities_),
            "::",
            stringify!(TrackpadSizeY)
        )
    );
}
pub type ovrInputTrackedRemoteCapabilities = ovrInputTrackedRemoteCapabilities_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrInputHeadsetCapabilities_ {
    pub Header: ovrInputCapabilityHeader,
    pub ControllerCapabilities: u32,
    pub ButtonCapabilities: u32,
    pub TrackpadMaxX: u16,
    pub TrackpadMaxY: u16,
    pub TrackpadSizeX: f32,
    pub TrackpadSizeY: f32,
}
#[test]
fn bindgen_test_layout_ovrInputHeadsetCapabilities_() {
    assert_eq!(
        ::std::mem::size_of::<ovrInputHeadsetCapabilities_>(),
        28usize,
        concat!("Size of: ", stringify!(ovrInputHeadsetCapabilities_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrInputHeadsetCapabilities_>(),
        4usize,
        concat!("Alignment of ", stringify!(ovrInputHeadsetCapabilities_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>())).Header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputHeadsetCapabilities_),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>())).ControllerCapabilities
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputHeadsetCapabilities_),
            "::",
            stringify!(ControllerCapabilities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>())).ButtonCapabilities as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputHeadsetCapabilities_),
            "::",
            stringify!(ButtonCapabilities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>())).TrackpadMaxX as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputHeadsetCapabilities_),
            "::",
            stringify!(TrackpadMaxX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>())).TrackpadMaxY as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputHeadsetCapabilities_),
            "::",
            stringify!(TrackpadMaxY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>())).TrackpadSizeX as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputHeadsetCapabilities_),
            "::",
            stringify!(TrackpadSizeX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputHeadsetCapabilities_>())).TrackpadSizeY as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputHeadsetCapabilities_),
            "::",
            stringify!(TrackpadSizeY)
        )
    );
}
pub type ovrInputHeadsetCapabilities = ovrInputHeadsetCapabilities_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrInputStateHeader_ {
    pub ControllerType: ovrControllerType,
    pub TimeInSeconds: f64,
}
#[test]
fn bindgen_test_layout_ovrInputStateHeader_() {
    assert_eq!(
        ::std::mem::size_of::<ovrInputStateHeader_>(),
        16usize,
        concat!("Size of: ", stringify!(ovrInputStateHeader_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrInputStateHeader_>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrInputStateHeader_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputStateHeader_>())).ControllerType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputStateHeader_),
            "::",
            stringify!(ControllerType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputStateHeader_>())).TimeInSeconds as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputStateHeader_),
            "::",
            stringify!(TimeInSeconds)
        )
    );
}
pub type ovrInputStateHeader = ovrInputStateHeader_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrInputStateTrackedRemote_ {
    pub Header: ovrInputStateHeader,
    pub Buttons: u32,
    pub TrackpadStatus: u32,
    pub TrackpadPosition: ovrVector2f,
    pub BatteryPercentRemaining: u8,
    pub RecenterCount: u8,
    pub Reserved: u16,
}
#[test]
fn bindgen_test_layout_ovrInputStateTrackedRemote_() {
    assert_eq!(
        ::std::mem::size_of::<ovrInputStateTrackedRemote_>(),
        40usize,
        concat!("Size of: ", stringify!(ovrInputStateTrackedRemote_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrInputStateTrackedRemote_>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrInputStateTrackedRemote_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>())).Header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputStateTrackedRemote_),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>())).Buttons as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputStateTrackedRemote_),
            "::",
            stringify!(Buttons)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>())).TrackpadStatus as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputStateTrackedRemote_),
            "::",
            stringify!(TrackpadStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>())).TrackpadPosition as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputStateTrackedRemote_),
            "::",
            stringify!(TrackpadPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>())).BatteryPercentRemaining
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputStateTrackedRemote_),
            "::",
            stringify!(BatteryPercentRemaining)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>())).RecenterCount as *const _
                as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputStateTrackedRemote_),
            "::",
            stringify!(RecenterCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputStateTrackedRemote_>())).Reserved as *const _ as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputStateTrackedRemote_),
            "::",
            stringify!(Reserved)
        )
    );
}
pub type ovrInputStateTrackedRemote = ovrInputStateTrackedRemote_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ovrInputStateHeadset_ {
    pub Header: ovrInputStateHeader,
    pub Buttons: u32,
    pub TrackpadStatus: u32,
    pub TrackpadPosition: ovrVector2f,
}
#[test]
fn bindgen_test_layout_ovrInputStateHeadset_() {
    assert_eq!(
        ::std::mem::size_of::<ovrInputStateHeadset_>(),
        32usize,
        concat!("Size of: ", stringify!(ovrInputStateHeadset_))
    );
    assert_eq!(
        ::std::mem::align_of::<ovrInputStateHeadset_>(),
        8usize,
        concat!("Alignment of ", stringify!(ovrInputStateHeadset_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrInputStateHeadset_>())).Header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputStateHeadset_),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ovrInputStateHeadset_>())).Buttons as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputStateHeadset_),
            "::",
            stringify!(Buttons)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputStateHeadset_>())).TrackpadStatus as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputStateHeadset_),
            "::",
            stringify!(TrackpadStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ovrInputStateHeadset_>())).TrackpadPosition as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ovrInputStateHeadset_),
            "::",
            stringify!(TrackpadPosition)
        )
    );
}
pub type ovrInputStateHeadset = ovrInputStateHeadset_;
extern "C" {
    pub fn vrapi_EnumerateInputDevices(
        ovr: *mut ovrMobile,
        index: u32,
        capsHeader: *mut ovrInputCapabilityHeader,
    ) -> ovrResult;
}
extern "C" {
    pub fn vrapi_GetInputDeviceCapabilities(
        ovr: *mut ovrMobile,
        capsHeader: *mut ovrInputCapabilityHeader,
    ) -> ovrResult;
}
extern "C" {
    pub fn vrapi_GetCurrentInputState(
        ovr: *mut ovrMobile,
        deviceID: ovrDeviceID,
        inputState: *mut ovrInputStateHeader,
    ) -> ovrResult;
}
extern "C" {
    pub fn vrapi_GetInputTrackingState(
        ovr: *mut ovrMobile,
        deviceID: ovrDeviceID,
        absTimeInSeconds: f64,
        tracking: *mut ovrTracking,
    ) -> ovrResult;
}
extern "C" {
    pub fn vrapi_RecenterInputPose(ovr: *mut ovrMobile, deviceID: ovrDeviceID);
}
extern "C" {
    pub fn vrapi_SetRemoteEmulation(ovr: *mut ovrMobile, emulationOn: bool) -> ovrResult;
}
#[repr(u32)]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ovrFrameInit {
    VRAPI_FRAME_INIT_DEFAULT = 0,
    VRAPI_FRAME_INIT_BLACK = 1,
    VRAPI_FRAME_INIT_BLACK_FLUSH = 2,
    VRAPI_FRAME_INIT_BLACK_FINAL = 3,
    VRAPI_FRAME_INIT_LOADING_ICON = 4,
    VRAPI_FRAME_INIT_LOADING_ICON_FLUSH = 5,
}
